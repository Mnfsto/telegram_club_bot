const mongoose = require('mongoose')
const { Markup,Telegraf } = require('telegraf');
const string_decoder = require("node:string_decoder");

const setupApiServer = require('./api/server.js');
const PORT = process.env.PORT || 8088;
const bot = new Telegraf(process.env.BOT_TOKEN);
const cron = require('node-cron')
const {get} = require("mongoose");
console.log(`PORT: ${PORT}`);

//Commands
const {
    startCommand,
} = require('./bot/commands')

//User Authentication
const {getOrCreateUser, checkAdmin, checkUserName, getParticipants, greetedUsers} = require('./bot/middlewares/auth.js');

// –ö—ç—à –Ω–∞ –æ—Å–Ω–æ–≤–µ Set
const actionCache = new Set(); // –•—Ä–∞–Ω–∏—Ç —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "telegramId_trainingId_action"

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ "DD.MM.YYYY" –≤ –æ–±—ä–µ–∫—Ç Date
const {parseDate} = require('./bot/utils/dateUtils.js')


//Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI, {useNewUrlParser: true, useUnifiedTopology: true})
    .then(() => {console.log('Connected to MongoDB...!')})
    .catch(err => console.error('Could not connect to MongoDB',err));

const Training = require('./models/training.js')//Training model
const User = require('./models/user.js') //User Model
const ApplicationMember = require('./models/application.js') //Member model









//Command /start
bot.start(startCommand);

/// User Interface
const textHandlers = require('./bot/handlers')
const http = require("node:http");
bot.on('text', textHandlers);


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ–≥–ª–∞—Å–µ–Ω"
bot.action('join_agree', async (ctx) => {
    const groupLink = 'https://t.me/+XEuv4MtxymowZTJi';
    try {
        const telegramId = ctx.from.id
        const user = await User.findOne({ telegramId });
        if (!user) {
            return ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        if (user.joinedClub) {
            return ctx.answerCbQuery('–í—ã —É–∂–µ –≤ –∫–ª—É–±–µ!');
        }

        user.joinedClub = true;
        await user.save();

        await bot.telegram.sendMessage(
            ctx.chat.id,
            `‚úÖ @${ctx.from.username || ctx.from.id} –≤—Å—Ç—É–ø–∏–ª –≤ –∫–ª—É–±!`
        );
        ctx.answerCbQuery('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–±!');
        user.joinedClub = true;
        await user.save();
        await ctx.editMessageText(
            `–û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –∫–ª—É–±–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ –≤ Telegram:\n${groupLink}`
        );
    } catch (err){
        console.error('Failed Join club:', err);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }

});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è"
bot.action('join_decline', async (ctx) => {
    await ctx.editMessageText(
        '–ñ–∞–ª—å, —á—Ç–æ –≤—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ "üö¥ Join Club üö¥" —Å–Ω–æ–≤–∞!',
        { parse_mode: 'Markdown' }
    );
    await ctx.answerCbQuery(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º callback
});




// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è "notgo"
bot.action(/notgo_(.+)/,checkUserName, async (ctx) => {
    console.log('notgo pressed, trainingId:', ctx.match[1]);
    const trainingId = ctx.match[1];
    const user = await getOrCreateUser(ctx);
    console.log('notgo pressed, trainingId:', user._id);
    const threadId = Number(process.env.GROUP_CHAT_THREAD_TRAINING);
    const telegramId = ctx.from.id;
    const cacheKey = `${telegramId}_${trainingId}_go`;
    if (actionCache.has(cacheKey)) {
        return console.log(`User ${telegramId} already clicked "go" for training ${trainingId}`);
    }

    try {
        await bot.telegram.sendMessage(
            process.env.GROUP_CHAT_ID,
            `:_( @${ctx.from.username}`,
            { message_thread_id: threadId }
        );
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
        actionCache.add(cacheKey);
        ctx.answerCbQuery();
    } catch (err) {
        console.error('Error in notgo action:', err);
        ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è "go"
bot.action(/go_(.+)/,checkUserName, async (ctx) => {
    console.log('Go pressed, trainingId:', ctx.match[1]);
    const trainingId = ctx.match[1];
    const threadId = Number(process.env.GROUP_CHAT_THREAD_TRAINING);
    const telegramId = ctx.from.id;
    const cacheKey = `${telegramId}_${trainingId}_go`;
    if (actionCache.has(cacheKey)) {
        return console.log(`User ${telegramId} already clicked "go" for training ${trainingId}`);
    }

    try {
        const user = await getOrCreateUser(ctx); // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–¥–µ—Å—å
        const nextTraining = await Training.findById(trainingId);

        if (!nextTraining) {
            await bot.telegram.sendMessage(
                process.env.GROUP_CHAT_ID,
                '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',
                { message_thread_id: threadId }
            );
            return ctx.answerCbQuery('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        if (!nextTraining.participants.includes(user._id)) {
            nextTraining.participants.push(user._id);
            await nextTraining.save();
            user.pixels += 1;
            await user.save();

            await bot.telegram.sendMessage(
                process.env.GROUP_CHAT_ID,
                `‚úÖ @${ctx.from.username} –æ—Ç–º–µ—á–µ–Ω –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.`,
                { message_thread_id: threadId }
            );

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
            actionCache.add(cacheKey);
            ctx.answerCbQuery();

        }


    } catch (err) {
        console.error('Error in go action:', err);
        await bot.telegram.sendMessage(
            process.env.GROUP_CHAT_ID,
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏.',
            { message_thread_id: threadId }
        );
        ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});






// ACTION
//–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ 7,00
bot.action('addTomarrow7', async (ctx) => {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const date = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    const location = "I‚ù§Ô∏èArcadia - –¢–ó";
    const time = '07:00';
    try{
        const newTraining = new Training({date, time, location, participants: []});
        await newTraining.save();
        ctx.reply(`–î–æ–±–∞–≤–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${date} –≤ ${time} –õ–æ–∫–∞—Ü–∏—è ${location}`);

    } catch (err){
        console.error('failed addTomarrow7');
        console.log(err);
    }
})

bot.action('addTomarrow8', async (ctx) => {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const date = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    const location = "I‚ù§Ô∏èArcadia - –¢–ó";
    const time = '08:00';
    try{
        const newTraining = new Training({date, time, location, participants: []});
        await newTraining.save();
        ctx.reply(`–î–æ–±–∞–≤–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${date} –≤ ${time} –õ–æ–∫–∞—Ü–∏—è ${location}`);

    } catch (err){
        console.error('failed addTomarrow8');
        console.log(err);
    }
})

bot.action('addTomarrow10', async (ctx) => {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const date = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    const location = "I‚ù§Ô∏èArcadia - –¢–ó";
    const time = '10:00';
    try{
        const newTraining = new Training({date, time, location, participants: []});
        await newTraining.save();
        ctx.reply(`–î–æ–±–∞–≤–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${date} –≤ ${time} –õ–æ–∫–∞—Ü–∏—è ${location}`);

    } catch (err){
        console.error('failed addTomarrow10');
        console.log(err);
    }
})

bot.action('addHeel10', async (ctx) => {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const date = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    const location = "–ú–∞—Ä—à–∞–ª-–ü—è—Ç–∞–∫ üêΩ";
    const time = '10:00';
    try{
        const newTraining = new Training({date, time, location, participants: []});
        await newTraining.save();
        ctx.reply(`–î–æ–±–∞–≤–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${date} –≤ ${time} –õ–æ–∫–∞—Ü–∏—è ${location}`);

    } catch (err){
        console.error('failed addHeel10');
        console.log(err);
    }
})

bot.action('addHeel8', async (ctx) => {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const date = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    const location = "–ú–∞—Ä—à–∞–ª-–ü—è—Ç–∞–∫ üêΩ";
    const time = '08:00';
    try{
        const newTraining = new Training({date, time, location, participants: []});
        await newTraining.save();
        ctx.reply(`–î–æ–±–∞–≤–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${date} –≤ ${time} –õ–æ–∫–∞—Ü–∏—è ${location}`);

    } catch (err){
        console.error('failed addHeel8');
        console.log(err);
    }
})

bot.action('addCoffe18', async (ctx) => {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const date = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    const location = "I‚ù§Ô∏èArcadia - –¢–ó";
    const time = '18:00';
    try{
        const newTraining = new Training({date, time, location, participants: []});
        await newTraining.save();
        ctx.reply(`–î–æ–±–∞–≤–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${date} –≤ ${time} –õ–æ–∫–∞—Ü–∏—è ${location}`);

    } catch (err){
        console.error('failed addCoffe18');
        console.log(err);
    }
})

bot.action('customWorkout', async (ctx) => {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const date = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    const location = "–õ–æ–∫–∞—Ü–∏—è";
    const time = '08:30';
  const draftMessage = `/addtraining ${date} ${time} ${location}`
    ctx.reply( `–°–∫–æ–ø–∏—Ä—É–π —ç—Ç–æ:  ${draftMessage}`);

})

// –ö–æ–º–∞–Ω–¥–∞ /checkin
bot.command('checkin', checkAdmin, async (ctx) => {
    try {
        const args = ctx.message.text.split(' ').slice(1); // –£–±–∏—Ä–∞–µ–º "/checkin"
        if (args.length < 3) {
            return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /checkin DD.MM.YYYY HH:MM @username');
        }

        const [date, time, username] = args;
        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞: ${date} ${time} ${username}`);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        if (!/^\d{2}\.\d{2}\.\d{4}$/.test(date) || !/^\d{2}:\d{2}$/.test(time)) {
            return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: /checkin 28.03.2025 08:00 @username');
        }

        // –£–±–∏—Ä–∞–µ–º @ –∏–∑ username, –µ—Å–ª–∏ –µ—Å—Ç—å
        const cleanUsername = username.startsWith('@') ? username.slice(1) : username;

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        const user = await User.findOne({ username: cleanUsername });
        if (!user) {
            return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }

        // –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        const training = await Training.findOne({ date, time });
        if (!training) {
            return ctx.reply(`–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${date} –≤ ${time} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–º–µ—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const userId = user._id;
        if (training.participants.some(id => id.equals(userId))) {
            return ctx.reply(`${username} —É–∂–µ –æ—Ç–º–µ—á–µ–Ω –Ω–∞ —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!`);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏
        training.participants.push(userId);
        await training.save();

        ctx.reply(`‚úÖ ${username} –æ—Ç–º–µ—á–µ–Ω –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ ${date} –≤ ${time}.`);
    } catch (err) {
        console.error('Failed checkin:', err);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏.');
    }
});


// –ö–æ–º–∞–Ω–¥–∞ /checkout
bot.command('checkout', checkAdmin, async (ctx) => {
    try {
        const args = ctx.message.text.split(' ').slice(1); // –£–±–∏—Ä–∞–µ–º "/checkout"
        if (args.length < 3) {
            return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /checkout DD.MM.YYYY HH:MM @username');
        }

        const [date, time, username] = args;
        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞: ${date} ${time} ${username}`);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        if (!/^\d{2}\.\d{2}\.\d{4}$/.test(date) || !/^\d{2}:\d{2}$/.test(time)) {
            return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: /checkout 28.03.2025 08:00 @username');
        }

        // –£–±–∏—Ä–∞–µ–º @ –∏–∑ username, –µ—Å–ª–∏ –µ—Å—Ç—å
        const cleanUsername = username.startsWith('@') ? username.slice(1) : username;

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        const user = await User.findOne({ username: cleanUsername });
        if (!user) {
            return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }

        // –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        const training = await Training.findOne({ date, time });
        if (!training) {
            return ctx.reply(`–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${date} –≤ ${time} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
        const userId = user._id;
        const participantIndex = training.participants.findIndex(id => id.equals(userId));
        if (participantIndex === -1) {
            return ctx.reply(`${username} –Ω–µ –æ—Ç–º–µ—á–µ–Ω –Ω–∞ —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!`);
        }

        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        training.participants.splice(participantIndex, 1);
        await training.save();

        ctx.reply(`‚ùå ${username} —É–¥–∞–ª—ë–Ω —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ${date} –≤ ${time}.`);
    } catch (err) {
        console.error('Failed checkout:', err);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.');
    }
});



// –ö–æ–º–∞–Ω–¥–∞ /addtraining –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫)
bot.command('addtraining', checkAdmin, async (ctx) => {
    const [_, date, time, ...locationArr] = ctx.message.text.split(' ');
    const location = locationArr.join(' ');
    if (!date || !time || !location) return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addtraining –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –ú–µ—Å—Ç–æ');
    try {
        const newTraining = new Training({date, time, location, participants: []});
        await newTraining.save();
        ctx.reply(`–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${date} –≤ ${time} –õ–æ–∫–∞—Ü–∏—è ${location}`);
    }  catch (err){
        console.error('failed add training');
        console.log(err);
    }
});

//Dellete all Training

bot.action('delAllWorkout', async (ctx) => {
    const today = new Date();
    today.setDate(today.getDate() + 1); // –ó–∞–≤—Ç—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞
    const tomorrowFormatted = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;

    const tomorrowDate = parseDate(tomorrowFormatted);

    try{
        const trainings = await Training.find();
        if (!trainings.length) {
            return ctx.reply('–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.');
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –∑–∞–≤—Ç—Ä–∞ –∏ –ø–æ–∑–∂–µ
        const trainingsToDelete = trainings.filter(training => {
            const trainingDate = parseDate(training.date);
            return trainingDate >= tomorrowDate;
        });

        if (!trainingsToDelete.length) {
            return ctx.reply(`–ù–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å ${tomorrowFormatted} –∏ –ø–æ–∑–∂–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.`);
        }

        // –£–¥–∞–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        await Training.deleteMany({
            date: { $in: trainingsToDelete.map(t => t.date) }
        });

        ctx.reply(`–£–¥–∞–ª–µ–Ω–æ ${trainingsToDelete.length} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å ${tomorrowFormatted} –∏ –ø–æ–∑–∂–µ.`);
    } catch(err){
        console.error('failed delAllWorkout');
        console.log(err);
    }
})

//Command /schedule –¥–ª—è –ø–æ–∫–∞–∑–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
bot.command('schedule', checkAdmin, async (ctx) => {
    const trainings = await Training.find();
    if (!trainings.length) return ctx.reply('–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.');

    let message = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n';
    trainings.forEach(t => {
        message += `üìÖ ${t.date} –≤ ${t.time}, üìç ${t.location}\n`;
    });
    ctx.reply(message);
});
bot.command('update', async (ctx) => {
   const upd = getUpdates(1);
   console.log(upd);
})


bot.on('message', async (ctx, next) => {
    const chatId = ctx.chat.id;
    const messageText = ctx.message.text;
    const chatType = ctx.chat.type; // "private", "group", "supergroup"
    const threadId = ctx.message.message_thread_id;
    const telegramId = ctx.from.id;

    console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ ${chatId} - ${threadId}: ${messageText}`);

    if (chatType === 'group' || chatType === 'supergroup') {
        const user = await getOrCreateUser(ctx);

        // // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤—Å—Ç—É–ø–∏–ª –≤ –∫–ª—É–± –∏ –Ω–µ –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        // if (!user.joinedClub && !greetedUsers.has(telegramId)) {
        //     const threadId = Number(process.env.GROUP_CHAT_THREAD_TRAINING);
        //
        //     await bot.telegram.sendMessage(
        //         process.env.GROUP_CHAT_ID,
        //         `–ü—Ä–∏–≤–µ—Ç, @${ctx.from.username || ctx.from.id}! –•–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–∞—à –∫–ª—É–±?`,
        //         {
        //             message_thread_id: threadId,
        //             reply_markup: Markup.inlineKeyboard([
        //                 Markup.button.callback('Join Club', `join_${telegramId}`)
        //             ]).reply_markup
        //         }
        //     );
        //     greetedUsers.add(telegramId); // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        // }
    }
    return next();
});




// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Join Club"
bot.action(/join_(.+)/, checkUserName, async (ctx) => {
    const telegramId = Number(ctx.match[1]);
    const threadId = Number(process.env.GROUP_CHAT_THREAD_TRAINING);

    try {
        const user = await User.findOne({ telegramId });
        if (!user) {
            return ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        if (user.joinedClub) {
            return ctx.answerCbQuery('–í—ã —É–∂–µ –≤ –∫–ª—É–±–µ!');
        }

        user.joinedClub = true;
        await user.save();

        await bot.telegram.sendMessage(
            process.env.GROUP_CHAT_ID,
            `‚úÖ @${ctx.from.username || ctx.from.id} –≤—Å—Ç—É–ø–∏–ª –≤ –∫–ª—É–±!`,
            { message_thread_id: threadId }
        );
        ctx.answerCbQuery('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–±!');
    } catch (err) {
        console.error('Error in join action:', err);
        ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});


// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫

cron.schedule('2 18 * * *',async (ctx) => {
    const today = new Date();
    today.setDate(today.getDate() +1);
    const formattedDate = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    console.log('Sending workout for:', formattedDate);

    const threadId = Number(process.env.GROUP_CHAT_THREAD_TRAINING);

    try {
        const nextTraining = await Training.findOne({ date: formattedDate });
        if (!nextTraining) {
            ctx.reply('–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.');
        }

        const { date, time, location } = nextTraining;

        await bot.telegram.sendMessage(
            process.env.GROUP_CHAT_ID,
            `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${date} ${time} ${location}`,
            {
                message_thread_id: threadId,
                reply_markup: Markup.inlineKeyboard([
                    Markup.button.callback("+", `go_${nextTraining._id}`),
                    Markup.button.callback("-", `notgo_${nextTraining._id}`)
                ]).reply_markup
            }
        );
    } catch (err){
        console.error('failed checkin training');
        console.log(err);
    }
});


// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1 –¥–µ–Ω—å –¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
cron.schedule('0 21 * * *', async () => {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const formattedDate = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    try {
        const trainings = await Training.find({date: formattedDate});
        if (trainings.length) {
            trainings.forEach(training => {
                bot.telegram.sendMessage(process.env.GROUP_CHAT_ID, `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ! üìÖ ${training.date} –≤ ${training.time}, üìç ${training.location}`,  { message_thread_id: process.env.GROUP_CHAT_THREAD_TRAINING });
            });
        }
    } catch (err){
            console.error('failed checkin training');
            console.log(err);
        }
});

cron.schedule('0 6 * * *', async ctx => {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const formattedDate = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    const nextTraining = await Training.findOne({date: formattedDate});
    const participants = nextTraining.participants;
    const user = await User.find({ _id: { $in: participants } });
    console.log(user);
    console.log(participants);
    try {

        console.log("–†–∞—Å—Å—ã–ª–∞—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", formattedDate);
        const train = `üìÖ ${nextTraining.date} –≤ ${nextTraining.time}, üìç ${nextTraining.location}\n`;
        console.log(train);
        user.forEach(u => {
            let message = `–ü—Ä–∏–≤–µ—Ç ${u.name}! –°–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ üí™ \n`;
            message += train;
            bot.telegram.sendMessage(u.telegramId, message)
        });
    } catch (err){
        console.error('failed checkin training');
        console.log(err);
    }

})

bot.launch();

// Start Server

const appServer = setupApiServer(bot);

const botServer = http.createServer(appServer)
botServer.listen(PORT, () => {
    console.log(`Bot server started on ${PORT}!`);
});

// Close Server
process.on("SIGINT", async () => {
    //await client.close();
    console.log("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É");
    process.exit();
})