require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose')
const { Markup,Telegraf } = require('telegraf');
const string_decoder = require("node:string_decoder");

const app = express();
const urlencodedParser = express.urlencoded({extended: false});
const PORT = process.env.PORT || 8088;
const bot = new Telegraf(process.env.BOT_TOKEN);
const cron = require('node-cron')
const {get} = require("mongoose");
console.log(`PORT: ${PORT}`);

const {getOrCreateUser, checkAdmin, getParticipants, greetedUsers} = require('./bot/middlewares/auth.js');

// –ö—ç—à –Ω–∞ –æ—Å–Ω–æ–≤–µ Set
const actionCache = new Set(); // –•—Ä–∞–Ω–∏—Ç —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "telegramId_trainingId_action"

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ "DD.MM.YYYY" –≤ –æ–±—ä–µ–∫—Ç Date
const {parseDate} = require('./bot/utils/dateUtils.js')


//Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI, {useNewUrlParser: true, useUnifiedTopology: true})
    .then(() => {console.log('Connected to MongoDB...!')})
    .catch(err => console.error('Could not connect to MongoDB',err));

const Training = require('./models/training.js')//Training model
const User = require('./models/user.js') //User Model
const ApplicationMember = require('./models/application.js') //Member model





//API to get the schedule
app.get('/api/trainings', async (req, res) => {
    const trainings = await Training.find();
    res.json(trainings);
})



// API for adding a new request (from the site)
app.post('/api/applications', async (req, res) => {
    const { name, phone, email } = req.body;
    const message = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞! \n Name: ${name} \n Phone: ${phone} \n Email: ${email}`;
    try{
    await bot.telegram.sendMessage(process.env.ADMIN_CHAT_ID, message);
    const newMember = new ApplicationMember({name, phone, email});
    await newMember.save();
    console.log(message)
    res.status(200).send({message: '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'})
    } catch (err) {
        console.error('failed to send an application from the site');
        console.log(err);
    }
})
// Post method for adding a new request (from the site)
app.post("/", urlencodedParser, async function (req, res) {
    const { name, phone, email } = req.body;
    const message = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞! \n Name: ${name} \n Phone: ${phone} \n Email: ${email}`;
    try{
        await bot.telegram.sendMessage(process.env.ADMIN_CHAT_ID, message);
        const newMember = new ApplicationMember({name, phone, email});
        await newMember.save();
        console.log(message)
        res.status(200).send({message: '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'})
    } catch (err) {
        console.error('failed to send an application from the site');
        console.log(err);
    }
});


///keybord for admin

const keyboard = Markup.inlineKeyboard([
    Markup.button.url("I‚ù§Ô∏èArcadia", "http://aradia-cycling.club"),
    Markup.button.callback("Delete", "delete"),
])

const keyboardAddWorkout = Markup.inlineKeyboard([

    [Markup.button.callback("Add Tomarrow I‚ù§Ô∏èA 7:00", "addTomarrow7")],
    [Markup.button.callback("Add Tomarrow I‚ù§Ô∏èA 8:00", "addTomarrow8")],
    [Markup.button.callback("Add Tomarrow I‚ù§Ô∏èA 10:00", "addTomarrow10")],
    [Markup.button.callback("Add Tomarrow üêΩ 8:00", "addHeel8")],
    [Markup.button.callback("Add Tomarrow üêΩ 10:00", "addHeel10")],
    [Markup.button.callback("Add Tomarrow Coffe 18:00", "addCoffe18")],
    [Markup.button.callback("Custom Workout", "customWorkout")],

])

const keyboardDeleteWorkout = Markup.inlineKeyboard([

    [Markup.button.callback("Remove Tomarrow I‚ù§Ô∏èA 7:00", "delTomarrow7")],
    [Markup.button.callback("Remove Tomarrow I‚ù§Ô∏èA 8:00", "delTomarrow8")],
    [Markup.button.callback("Remove Tomarrow I‚ù§Ô∏èA 10:00", "delTomarrow10")],
    [Markup.button.callback("Remove Tomarrow üêΩ 8:00", "delHeel8")],
    [Markup.button.callback("Remove Tomarrow üêΩ 10:00", "delHeel0")],
    [Markup.button.callback("Remove Tomarrow Coffe 18:00", "delCoffe18")],
    [Markup.button.callback("Remove All Workout", "delAllWorkout")],
    ]
)

//Command /start
bot.start(async (ctx) => {
    const telegramId = ctx.from.id;
    let user = await User.findOne({ telegramId });
    const admin = process.env.ADMIN_CHAT_ID;
    if (telegramId == admin) {
        ctx.reply("Hello Admin",
            Markup.keyboard([
                ["üö¥ Add a Workout", "‚ùå Delete Workout"], // Row1 with 2 buttons
                ["üó£Ô∏è Send a workout", "‚úîÔ∏è Check it"], // Row2 with 2 buttons
                ["üì¢ Remind everyone", "üóìÔ∏è Training List", "üë• Share"], // Row3 with 3 buttons


            ] )
                .resize())
        //bot.action("addTraining", async ctx => await ctx.editMessageCaption("/addtraining –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –ú–µ—Å—Ç–æ") )

   } else{

        ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Pixel Fighter. –ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞',
            Markup.keyboard([
                ["üóìÔ∏è Training List", "üìà Rank"], // Row1 with 2 buttons
                ["üö¥ Join Club üö¥", "üö¥ Next training"], // Row2 with 2 buttons
                [ "‚≠êÔ∏è Rate us", "üë• Share"], // Row3 with 2 buttons
            ])
                .resize(),

        )
    }



    if (!user) {
        user = new User({
            telegramId,
            name: ctx.from.first_name,
            username: ctx.from.username,
            role: process.env.ADMIN_CHAT_IDS.split(',').includes(telegramId.toString()) ? 'admin' : 'user',  // Simple admin check
        });
        console.log(ctx.from);
        await user.save();

    }

});

/// User Interface

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üö¥ Join Club üö¥"
bot.hears('üö¥ Join Club üö¥', async (ctx) => {
    const user = await User.findOne({ telegramId: ctx.from.id });
    if (user && user.joinedClub) {
        return ctx.reply(`–í—ã —É–∂–µ –≤ –∫–ª—É–±–µ! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É:\n${groupLink}`);
    }
    const clubPolicy = `
Arcadia Cycling Club  
Arcadia Cycling Club - –æ–¥–Ω–∞ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –û–¥–µ—Å—Å—ã. –ú—ã –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∏ –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–º–µ—Ä—Ü–∏–∏, –ø–æ—ç—Ç–æ–º—É –Ω–µ—Ç —á–ª–µ–Ω—Å–∫–∏—Ö –≤–∑–Ω–æ—Å–æ–≤.  
–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–ª—É–± –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫–ª—É–±–Ω—É—é —Ñ–æ—Ä–º—É. –≠—Ç–æ –¥–∞—Å—Ç –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ä—à—Ä—É—Ç–∞–º –∏ –Ω–æ–≤—ã–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏.  

–ö–ª—É–±–Ω–∞—è —Ñ–æ—Ä–º–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –∏ —Å–ª—É–∂–∏—Ç —Ä–µ–∫–ª–∞–º–æ–π –¥–ª—è —Å–ø–æ–Ω—Å–æ—Ä–æ–≤, —Ñ–æ—Ä–º–∏—Ä—É—è –±—é–¥–∂–µ—Ç –∫–ª—É–±–∞.  
–í—Å—Ç—É–ø–∞—è –≤ –∫–ª—É–±, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Ä–∞–∑ –≤ –≥–æ–¥ –ø–æ–º–æ–≥–∞—Ç—å –∫–ª—É–±—É –∫–∞–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä.  
–ú—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤–µ–ª–æ—Å–ø–æ—Ä—Ç –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –ø–æ–º–æ—â—å —á–ª–µ–Ω–æ–≤ –≤ –∫–ª—É–±–Ω—ã—Ö –¥–µ–ª–∞—Ö.  
–ß–ª–µ–Ω—ã –∫–ª—É–±–∞ —Å–ª—É–∂–∞—Ç –µ–º—É —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∫–ª—É–± —Å–ª—É–∂–∏—Ç –∏–º.
`;

    try {
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏'); // –û—Ç–ª–∞–¥–∫–∞
        await ctx.reply(clubPolicy, {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '–í—Å—Ç—É–ø–∏—Ç—å', callback_data: 'join_agree' },
                        { text: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data: 'join_decline' }
                    ]
                ]
            }
        });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ–≥–ª–∞—Å–µ–Ω"
bot.action('join_agree', async (ctx) => {
    const groupLink = 'https://t.me/+XEuv4MtxymowZTJi';
    await ctx.editMessageText(
        `–û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –∫–ª—É–±–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ –≤ Telegram:\n${groupLink}`
    );
    await ctx.answerCbQuery(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º callback
});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è"
bot.action('join_decline', async (ctx) => {
    await ctx.editMessageText(
        '–ñ–∞–ª—å, —á—Ç–æ –≤—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ "üö¥ Join Club üö¥" —Å–Ω–æ–≤–∞!',
        { parse_mode: 'Markdown' }
    );
    await ctx.answerCbQuery(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º callback
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "‚≠êÔ∏è Rate us"
bot.hears('‚≠êÔ∏è Rate us', async (ctx) => {
    const threadId = Number(process.env.GROUP_CHAT_THREAD_TRAINING);

    try {
        await bot.telegram.sendMessage(
            process.env.ADMIN_CHAT_ID || ctx.chat.id, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –ª–∏—á–∫—É
            `–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ Arcadia Cycling Club!\n` +
            `–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ –Ω–∞ –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ:\n` +
            `https://www.instagram.com/arcadia_cycling_club`, {
                reply_markup: Markup.inlineKeyboard([
                    Markup.button.url('–û—Ç–∫—Ä—ã—Ç—å Instagram', 'https://www.instagram.com/arcadia_cycling_club')
                ]).reply_markup
            }
    );
    } catch (err) {
        console.error('Failed to send rate message:', err);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ "üìà Rank"
bot.hears('üìà Rank', async (ctx) => {
    try {
        // –£—Å–ª–æ–≤–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
        const conditions = `
üìà –†–µ–π—Ç–∏–Ω–≥ Arcadia Cycling Club
- –ó–∞ –∫–∞–∂–¥–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 1 –ø–∏–∫—Å–µ–ª—å
- –ü–∏–∫—Å–µ–ª–∏ –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ –º–µ—Ä—á
- –ß–µ–º –±–æ–ª—å—à–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, —Ç–µ–º –≤—ã—à–µ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥

–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–∏–∫—Å–µ–ª—è–º
`;

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø–∏–∫—Å–µ–ª–µ–π
        const users = await User.find({ pixels: { $gt: 0 } }) // –¢–æ–ª—å–∫–æ —Å –ø–∏–∫—Å–µ–ª—è–º–∏ > 0
            .sort({ pixels: -1 }) // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
            .limit(10); // –¢–æ–ø-10 (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)

        if (!users.length) {
            return ctx.reply(`${conditions}–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª –ø–∏–∫—Å–µ–ª–∏. –ü–æ—Å–µ—â–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!`, { parse_mode: 'Markdown' });
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–π—Ç–∏–Ω–≥–∞
        const rankingTable = users.map((user, index) => {
            const position = index + 1;
            return `${position}. ${user.username || user.telegramId} ‚Äî ${user.pixels} –ø–∏–∫—Å–µ–ª–µ–π`;
        }).join('\n');

        // –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const fullMessage = `${conditions}${rankingTable}`;
        console.log('Sending message:', fullMessage); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

        await bot.telegram.sendMessage(
            ctx.chat.id, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            fullMessage
        );
    } catch (err) {
        console.error('Failed to fetch ranking:', err);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞.');
    }
});




///Admin Interface

bot.hears("‚ùå Delete Workout", checkAdmin, async ctx => {
    ctx.reply(
        "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É /removetraining –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –ú–µ—Å—Ç–æ",
        keyboardDeleteWorkout,
    );
    const today = new Date();
    const formattedDate =`${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    try {
        const trainings = await Training.find({ date: { $gte: formattedDate } }).sort({ date: 1 });
        const nextTrainings = trainings.filter(training => {
            const trainingDate = parseDate(training.date);
            return trainingDate >= today;
        });
        if (!trainings.length) return ctx.reply('–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.');

        let message = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n';
        nextTrainings.forEach(t => {
            message += `üìÖ ${t.date} –≤ ${t.time}, üìç ${t.location}\n`;
        });
        ctx.reply(message);
    } catch (err){
        console.error('failed checkin training');
        console.log(err);
    }
});

const addTrainingCommand = require('./bot/commands/addTraining.js')
bot.hears("üö¥ Add a Workout", checkAdmin,addTrainingCommand);

//ToDo: To list Just the upcoming training sessions

bot.hears("‚úîÔ∏è Check it", checkAdmin, async ctx => {
    const today = new Date();
    const formattedDate =`${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    try {

        const trainings = await Training.find({ date: { $gte: formattedDate } }).sort({ date: 1 });
        const nextTrainings = trainings.filter(training => {
            const trainingDate = parseDate(training.date);
            return trainingDate >= today;
        });
        if (!nextTrainings) return ctx.reply('–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.');
        let message = '–õ–∏—Å—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n';
        for (const training of nextTrainings) {
            const listParticipants = training.participants;
            const participants = await User.find({ _id: { $in: listParticipants } });

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            const participantList = participants.length
                ? participants.map((user, index) => `${index + 1}. @${user.username}`).join('\n')
                : '–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤';

            message += `üìÖ *${training.date} –≤ ${training.time}* (${training.location || '–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}):\n${participantList}\n\n`;
        }
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
        ctx.reply(message);
    } catch (err) {
        console.error('failed checkin training');
        console.log(err);
    }

})
//ToDo: Doesn't work, most likely the problem is in the list of participants
bot.hears("üì¢ Remind everyone",checkAdmin, async ctx => {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const formattedDate = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    const nextTraining = await Training.findOne({date: formattedDate});
    const participants = nextTraining.participants;
    console.log(participants);
    try {
        const users = await User.find({ _id: { $in: participants } });
        console.log("–†–∞—Å—Å—ã–ª–∞—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", formattedDate);
        const train = `üìÖ ${nextTraining.date} –≤ ${nextTraining.time}, üìç ${nextTraining.location}\n`;
        console.log(train);
        let successCount = 0;
        for (const user of users) {
            const message = `–ü—Ä–∏–≤–µ—Ç, @${user.username || user.telegramId}! –ó–∞–≤—Ç—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ üí™\n${train}`;
            try {
                await bot.telegram.sendMessage(user.telegramId, message);
                successCount++;
                console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${user.username || user.telegramId}`);
            } catch (err) {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${user.telegramId}:`, err);
            }
        }

        ctx.reply(`–£–≤–µ–¥–æ–º–ª–µ–Ω–æ ${successCount} –∏–∑ ${users.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.`);
    } catch (err){
        console.error('failed checkin training');
        console.log(err);
    }

})


bot.hears("üö¥ Next training", async ctx => {
    const today = new Date();
    today.setDate(today.getDate());
    const formattedDate = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    try {
        const trainings = await Training.find({ date: { $gte: formattedDate } }).sort({ date: 1 });
        const nextTrainings = trainings.filter(training => {
            const trainingDate = parseDate(training.date);
            return trainingDate >= today;
        });
        if (!trainings.length) return ctx.reply('–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.');

        let message = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n';
        nextTrainings.forEach(t => {
            message += `üìÖ ${t.date} –≤ ${t.time}, üìç ${t.location}\n`;
        });
        ctx.reply(message);
    } catch (err){
        console.error('failed checkin training');
        console.log(err);
    }
});


bot.hears('üó£Ô∏è Send a workout', checkAdmin, async (ctx) => {
    const today = new Date();
    today.setDate(today.getDate() +1);
    const formattedDate = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    console.log('Sending workout for:', formattedDate);
    const user = await getOrCreateUser(ctx);
    console.log(user.username);
    const threadId = Number(process.env.GROUP_CHAT_THREAD_TRAINING);

    try {
        const nextTraining = await Training.findOne({ date: formattedDate });
        if (!nextTraining) {
            return ctx.reply('–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.');
        }

        const { date, time, location } = nextTraining;

        await bot.telegram.sendMessage(
            process.env.GROUP_CHAT_ID,
            `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${date} ${time} ${location}`,
            {
                message_thread_id: threadId,
                reply_markup: Markup.inlineKeyboard([
                    Markup.button.callback("+", `go_${nextTraining._id}`),
                    Markup.button.callback("-", `notgo_${nextTraining._id}`)
                ]).reply_markup
            }
        );
        ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.');
    } catch (err) {
        console.error('Failed to send workout:', err);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è "notgo"
bot.action(/notgo_(.+)/, async (ctx) => {
    console.log('notgo pressed, trainingId:', ctx.match[1]);
    const trainingId = ctx.match[1];
    const user = await getOrCreateUser(ctx);
    console.log('notgo pressed, trainingId:', user._id);
    const threadId = Number(process.env.GROUP_CHAT_THREAD_TRAINING);
    const telegramId = ctx.from.id;
    const cacheKey = `${telegramId}_${trainingId}_go`;
    if (actionCache.has(cacheKey)) {
        return console.log(`User ${telegramId} already clicked "go" for training ${trainingId}`);
    }

    try {
        await bot.telegram.sendMessage(
            process.env.GROUP_CHAT_ID,
            `:_( @${ctx.from.username}`,
            { message_thread_id: threadId }
        );
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
        actionCache.add(cacheKey);
        ctx.answerCbQuery();
    } catch (err) {
        console.error('Error in notgo action:', err);
        ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è "go"
bot.action(/go_(.+)/, async (ctx) => {
    console.log('Go pressed, trainingId:', ctx.match[1]);
    const trainingId = ctx.match[1];
    const threadId = Number(process.env.GROUP_CHAT_THREAD_TRAINING);
    const telegramId = ctx.from.id;
    const cacheKey = `${telegramId}_${trainingId}_go`;
    if (actionCache.has(cacheKey)) {
        return console.log(`User ${telegramId} already clicked "go" for training ${trainingId}`);
    }

    try {
        const user = await getOrCreateUser(ctx); // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–¥–µ—Å—å
        const nextTraining = await Training.findById(trainingId);

        if (!nextTraining) {
            await bot.telegram.sendMessage(
                process.env.GROUP_CHAT_ID,
                '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',
                { message_thread_id: threadId }
            );
            return ctx.answerCbQuery('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        if (!nextTraining.participants.includes(user._id)) {
            nextTraining.participants.push(user._id);
            await nextTraining.save();
            user.pixels += 1;
            await user.save();

            await bot.telegram.sendMessage(
                process.env.GROUP_CHAT_ID,
                `‚úÖ @${ctx.from.username} –æ—Ç–º–µ—á–µ–Ω –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.`,
                { message_thread_id: threadId }
            );

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
            actionCache.add(cacheKey);
            ctx.answerCbQuery();

        }


    } catch (err) {
        console.error('Error in go action:', err);
        await bot.telegram.sendMessage(
            process.env.GROUP_CHAT_ID,
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏.',
            { message_thread_id: threadId }
        );
        ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

const trainingList = require('./bot/commands/trainingList.js')
bot.hears("üóìÔ∏è Training List", trainingList)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üë• Share"
bot.hears("üë• Share", async (ctx) => {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const formattedDate = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;

    const nextTraining = await Training.findOne({ date: formattedDate });
    if (!nextTraining) {
        return ctx.reply('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    }

    // –¢–µ–∫—Å—Ç –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
    const shareText = `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!\nüìÖ ${nextTraining.date} –≤ ${nextTraining.time}\nüìç ${nextTraining.location}\n–£–∑–Ω–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É –±–æ—Ç–∞!`;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    const botUsername = '@PixelCoachBot'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @MyTrainingBot)
    const shareLink = `https://t.me/${botUsername}?start=training_${nextTraining._id}`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
    await ctx.reply(
        `${shareText}\n\n–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:`,
        Markup.inlineKeyboard([
            Markup.button.switchToChat('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è', `${shareText}\n${shareLink}`)
        ])
    );
});



// ACTION
//–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ 7,00
bot.action('addTomarrow7', async (ctx) => {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const date = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    const location = "I‚ù§Ô∏èArcadia - –¢–ó";
    const time = '07:00';
    try{
        const newTraining = new Training({date, time, location, participants: []});
        await newTraining.save();
        ctx.reply(`–î–æ–±–∞–≤–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${date} –≤ ${time} –õ–æ–∫–∞—Ü–∏—è ${location}`);

    } catch (err){
        console.error('failed addTomarrow7');
        console.log(err);
    }
})

bot.action('addTomarrow8', async (ctx) => {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const date = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    const location = "I‚ù§Ô∏èArcadia - –¢–ó";
    const time = '08:00';
    try{
        const newTraining = new Training({date, time, location, participants: []});
        await newTraining.save();
        ctx.reply(`–î–æ–±–∞–≤–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${date} –≤ ${time} –õ–æ–∫–∞—Ü–∏—è ${location}`);

    } catch (err){
        console.error('failed addTomarrow8');
        console.log(err);
    }
})

bot.action('addTomarrow10', async (ctx) => {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const date = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    const location = "I‚ù§Ô∏èArcadia - –¢–ó";
    const time = '10:00';
    try{
        const newTraining = new Training({date, time, location, participants: []});
        await newTraining.save();
        ctx.reply(`–î–æ–±–∞–≤–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${date} –≤ ${time} –õ–æ–∫–∞—Ü–∏—è ${location}`);

    } catch (err){
        console.error('failed addTomarrow10');
        console.log(err);
    }
})

bot.action('addHeel10', async (ctx) => {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const date = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    const location = "–ú–∞—Ä—à–∞–ª-–ü—è—Ç–∞–∫ üêΩ";
    const time = '10:00';
    try{
        const newTraining = new Training({date, time, location, participants: []});
        await newTraining.save();
        ctx.reply(`–î–æ–±–∞–≤–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${date} –≤ ${time} –õ–æ–∫–∞—Ü–∏—è ${location}`);

    } catch (err){
        console.error('failed addHeel10');
        console.log(err);
    }
})

bot.action('addHeel8', async (ctx) => {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const date = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    const location = "–ú–∞—Ä—à–∞–ª-–ü—è—Ç–∞–∫ üêΩ";
    const time = '08:00';
    try{
        const newTraining = new Training({date, time, location, participants: []});
        await newTraining.save();
        ctx.reply(`–î–æ–±–∞–≤–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${date} –≤ ${time} –õ–æ–∫–∞—Ü–∏—è ${location}`);

    } catch (err){
        console.error('failed addHeel8');
        console.log(err);
    }
})

bot.action('addCoffe18', async (ctx) => {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const date = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    const location = "I‚ù§Ô∏èArcadia - –¢–ó";
    const time = '18:00';
    try{
        const newTraining = new Training({date, time, location, participants: []});
        await newTraining.save();
        ctx.reply(`–î–æ–±–∞–≤–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${date} –≤ ${time} –õ–æ–∫–∞—Ü–∏—è ${location}`);

    } catch (err){
        console.error('failed addCoffe18');
        console.log(err);
    }
})

bot.action('customWorkout', async (ctx) => {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const date = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    const location = "–õ–æ–∫–∞—Ü–∏—è";
    const time = '08:30';
  const draftMessage = `/addtraining ${date} ${time} ${location}`
    ctx.reply( `–°–∫–æ–ø–∏—Ä—É–π —ç—Ç–æ:  ${draftMessage}`);

})

// –ö–æ–º–∞–Ω–¥–∞ /checkin
bot.command('checkin', checkAdmin, async (ctx) => {
    try {
        const args = ctx.message.text.split(' ').slice(1); // –£–±–∏—Ä–∞–µ–º "/checkin"
        if (args.length < 3) {
            return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /checkin DD.MM.YYYY HH:MM @username');
        }

        const [date, time, username] = args;
        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞: ${date} ${time} ${username}`);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        if (!/^\d{2}\.\d{2}\.\d{4}$/.test(date) || !/^\d{2}:\d{2}$/.test(time)) {
            return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: /checkin 28.03.2025 08:00 @username');
        }

        // –£–±–∏—Ä–∞–µ–º @ –∏–∑ username, –µ—Å–ª–∏ –µ—Å—Ç—å
        const cleanUsername = username.startsWith('@') ? username.slice(1) : username;

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        const user = await User.findOne({ username: cleanUsername });
        if (!user) {
            return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }

        // –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        const training = await Training.findOne({ date, time });
        if (!training) {
            return ctx.reply(`–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${date} –≤ ${time} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–º–µ—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const userId = user._id;
        if (training.participants.some(id => id.equals(userId))) {
            return ctx.reply(`${username} —É–∂–µ –æ—Ç–º–µ—á–µ–Ω –Ω–∞ —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!`);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏
        training.participants.push(userId);
        await training.save();

        ctx.reply(`‚úÖ ${username} –æ—Ç–º–µ—á–µ–Ω –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ ${date} –≤ ${time}.`);
    } catch (err) {
        console.error('Failed checkin:', err);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏.');
    }
});


// –ö–æ–º–∞–Ω–¥–∞ /checkout
bot.command('checkout', checkAdmin, async (ctx) => {
    try {
        const args = ctx.message.text.split(' ').slice(1); // –£–±–∏—Ä–∞–µ–º "/checkout"
        if (args.length < 3) {
            return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /checkout DD.MM.YYYY HH:MM @username');
        }

        const [date, time, username] = args;
        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞: ${date} ${time} ${username}`);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        if (!/^\d{2}\.\d{2}\.\d{4}$/.test(date) || !/^\d{2}:\d{2}$/.test(time)) {
            return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: /checkout 28.03.2025 08:00 @username');
        }

        // –£–±–∏—Ä–∞–µ–º @ –∏–∑ username, –µ—Å–ª–∏ –µ—Å—Ç—å
        const cleanUsername = username.startsWith('@') ? username.slice(1) : username;

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        const user = await User.findOne({ username: cleanUsername });
        if (!user) {
            return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }

        // –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        const training = await Training.findOne({ date, time });
        if (!training) {
            return ctx.reply(`–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${date} –≤ ${time} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
        const userId = user._id;
        const participantIndex = training.participants.findIndex(id => id.equals(userId));
        if (participantIndex === -1) {
            return ctx.reply(`${username} –Ω–µ –æ—Ç–º–µ—á–µ–Ω –Ω–∞ —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!`);
        }

        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        training.participants.splice(participantIndex, 1);
        await training.save();

        ctx.reply(`‚ùå ${username} —É–¥–∞–ª—ë–Ω —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ${date} –≤ ${time}.`);
    } catch (err) {
        console.error('Failed checkout:', err);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.');
    }
});

bot.command('check', checkAdmin,async (ctx) => {
    const today = new Date();
    const telegramId = ctx.from.id;
    today.setDate(today.getDate() + 1);
    console.log('running every minute 1');
    console.log(today.toISOString());
    const formattedDate = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    console.log(formattedDate);
    let user = await User.findOne({ telegramId });
    try{
        const training = await Training.find({date: formattedDate});
        const nextTraining = await Training.findOne({date: formattedDate});
        if (!nextTraining) return ctx.reply('–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.');
        if (training.length) {
            const {_, date, time} = nextTraining;
            bot.telegram.sendMessage(process.env.GROUP_CHAT_ID, `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${date} ${time}`, Markup.inlineKeyboard([
                Markup.button.callback("+", "go"),
                Markup.button.callback("-", "dontgo")
            ]), { message_thread_id: process.env.GROUP_CHAT_THREAD_TRAINING });
            bot.action("go", getOrCreateUser, async (ctx) => {
                if (!nextTraining.participants.includes(user._id)) {
                    bot.telegram.sendMessage(process.env.GROUP_CHAT_ID, '–û—Ç–ª–∏—á–Ω–æ –ø–æ–µ—Ö–∞–ª–∏', { message_thread_id: process.env.GROUP_CHAT_THREAD_TRAINING })
                    nextTraining.participants.push(user._id);
                    await nextTraining.save();
                    bot.telegram.sendMessage(process.env.GROUP_CHAT_ID, `‚úÖ @${ctx.from.username} –æ—Ç–º–µ—á–µ–Ω –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.`, { message_thread_id: process.env.GROUP_CHAT_THREAD_TRAINING });

                }
            })

            bot.action("dontgo", getOrCreateUser, async (ctx) => {
                bot.telegram.sendMessage(process.env.GROUP_CHAT_ID, `:_( @${ctx.from.username} `, { message_thread_id: process.env.GROUP_CHAT_THREAD_TRAINING });
            })

        };
    } catch (err){
        console.error('failed checkin training');
        console.log(err);
    }
});


// –ö–æ–º–∞–Ω–¥–∞ /addtraining –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫)
bot.command('addtraining', checkAdmin, async (ctx) => {
    const [_, date, time, ...locationArr] = ctx.message.text.split(' ');
    const location = locationArr.join(' ');
    if (!date || !time || !location) return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addtraining –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –ú–µ—Å—Ç–æ');
    try {
        const newTraining = new Training({date, time, location, participants: []});
        await newTraining.save();
        ctx.reply(`–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${date} –≤ ${time} –õ–æ–∫–∞—Ü–∏—è ${location}`);
    }  catch (err){
        console.error('failed add training');
        console.log(err);
    }
});

//Dellete all Training

bot.action('delAllWorkout', async (ctx) => {
    const today = new Date();
    today.setDate(today.getDate() + 1); // –ó–∞–≤—Ç—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞
    const tomorrowFormatted = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;

    const tomorrowDate = parseDate(tomorrowFormatted);

    try{
        const trainings = await Training.find();
        if (!trainings.length) {
            return ctx.reply('–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.');
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –∑–∞–≤—Ç—Ä–∞ –∏ –ø–æ–∑–∂–µ
        const trainingsToDelete = trainings.filter(training => {
            const trainingDate = parseDate(training.date);
            return trainingDate >= tomorrowDate;
        });

        if (!trainingsToDelete.length) {
            return ctx.reply(`–ù–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å ${tomorrowFormatted} –∏ –ø–æ–∑–∂–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.`);
        }

        // –£–¥–∞–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        await Training.deleteMany({
            date: { $in: trainingsToDelete.map(t => t.date) }
        });

        ctx.reply(`–£–¥–∞–ª–µ–Ω–æ ${trainingsToDelete.length} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å ${tomorrowFormatted} –∏ –ø–æ–∑–∂–µ.`);
    } catch(err){
        console.error('failed delAllWorkout');
        console.log(err);
    }
})

//Command /schedule –¥–ª—è –ø–æ–∫–∞–∑–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
bot.command('schedule', checkAdmin, async (ctx) => {
    const trainings = await Training.find();
    if (!trainings.length) return ctx.reply('–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.');

    let message = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n';
    trainings.forEach(t => {
        message += `üìÖ ${t.date} –≤ ${t.time}, üìç ${t.location}\n`;
    });
    ctx.reply(message);
});
bot.command('update', async (ctx) => {
   const upd = getUpdates(1);
   console.log(upd);
})
bot.on('message', async (ctx) => {
    const chatId = ctx.chat.id;
    const messageText = ctx.message.text;
    const chatType = ctx.chat.type; // "private", "group", "supergroup"
    const threadId = ctx.message.message_thread_id;
    const telegramId = ctx.from.id;

    console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ ${chatId} - ${threadId}: ${messageText}`);

    if (chatType === 'group' || chatType === 'supergroup') {
        const user = await getOrCreateUser(ctx);

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤—Å—Ç—É–ø–∏–ª –≤ –∫–ª—É–± –∏ –Ω–µ –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if (!user.joinedClub && !greetedUsers.has(telegramId)) {
            const threadId = Number(process.env.GROUP_CHAT_THREAD_TRAINING);

            await bot.telegram.sendMessage(
                process.env.GROUP_CHAT_ID,
                `–ü—Ä–∏–≤–µ—Ç, @${ctx.from.username || ctx.from.id}! –•–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–∞—à –∫–ª—É–±?`,
                {
                    message_thread_id: threadId,
                    reply_markup: Markup.inlineKeyboard([
                        Markup.button.callback('Join Club', `join_${telegramId}`)
                    ]).reply_markup
                }
            );
            greetedUsers.add(telegramId); // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Join Club"
bot.action(/join_(.+)/, async (ctx) => {
    const telegramId = Number(ctx.match[1]);
    const threadId = Number(process.env.GROUP_CHAT_THREAD_TRAINING);

    try {
        const user = await User.findOne({ telegramId });
        if (!user) {
            return ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        if (user.joinedClub) {
            return ctx.answerCbQuery('–í—ã —É–∂–µ –≤ –∫–ª—É–±–µ!');
        }

        user.joinedClub = true;
        await user.save();

        await bot.telegram.sendMessage(
            process.env.GROUP_CHAT_ID,
            `‚úÖ @${ctx.from.username || ctx.from.id} –≤—Å—Ç—É–ø–∏–ª –≤ –∫–ª—É–±!`,
            { message_thread_id: threadId }
        );
        ctx.answerCbQuery('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–±!');
    } catch (err) {
        console.error('Error in join action:', err);
        ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Join Club"
bot.action(/join_(.+)/, async (ctx) => {
    const telegramId = Number(ctx.match[1]);
    const threadId = Number(process.env.GROUP_CHAT_THREAD_TRAINING);

    try {
        const user = await User.findOne({ telegramId });
        if (!user) {
            return ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        if (user.joinedClub) {
            return ctx.answerCbQuery('–í—ã —É–∂–µ –≤ –∫–ª—É–±–µ!');
        }

        user.joinedClub = true;
        await user.save();

        await bot.telegram.sendMessage(
            process.env.GROUP_CHAT_ID,
            `‚úÖ @${ctx.from.username || ctx.from.id} –≤—Å—Ç—É–ø–∏–ª –≤ –∫–ª—É–±!`,
            { message_thread_id: threadId }
        );
        ctx.answerCbQuery('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–±!');
    } catch (err) {
        console.error('Error in join action:', err);
        ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});


// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫

cron.schedule('2 18 * * *',async (ctx) => {
    const today = new Date();
    today.setDate(today.getDate() +1);
    const formattedDate = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    console.log('Sending workout for:', formattedDate);

    const threadId = Number(process.env.GROUP_CHAT_THREAD_TRAINING);

    try {
        const nextTraining = await Training.findOne({ date: formattedDate });
        if (!nextTraining) {
            ctx.reply('–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.');
        }

        const { date, time, location } = nextTraining;

        await bot.telegram.sendMessage(
            process.env.GROUP_CHAT_ID,
            `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${date} ${time} ${location}`,
            {
                message_thread_id: threadId,
                reply_markup: Markup.inlineKeyboard([
                    Markup.button.callback("+", `go_${nextTraining._id}`),
                    Markup.button.callback("-", `notgo_${nextTraining._id}`)
                ]).reply_markup
            }
        );
    } catch (err){
        console.error('failed checkin training');
        console.log(err);
    }
});


// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1 –¥–µ–Ω—å –¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
cron.schedule('0 21 * * *', async () => {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const formattedDate = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    try {
        const trainings = await Training.find({date: formattedDate});
        if (trainings.length) {
            trainings.forEach(training => {
                bot.telegram.sendMessage(process.env.GROUP_CHAT_ID, `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ! üìÖ ${training.date} –≤ ${training.time}, üìç ${training.location}`,  { message_thread_id: process.env.GROUP_CHAT_THREAD_TRAINING });
            });
        }
    } catch (err){
            console.error('failed checkin training');
            console.log(err);
        }
});

cron.schedule('0 6 * * *', async ctx => {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const formattedDate = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    const nextTraining = await Training.findOne({date: formattedDate});
    const participants = nextTraining.participants;
    const user = await User.find({ _id: { $in: participants } });
    console.log(user);
    console.log(participants);
    try {

        console.log("–†–∞—Å—Å—ã–ª–∞—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", formattedDate);
        const train = `üìÖ ${nextTraining.date} –≤ ${nextTraining.time}, üìç ${nextTraining.location}\n`;
        console.log(train);
        user.forEach(u => {
            let message = `–ü—Ä–∏–≤–µ—Ç ${u.name}! –°–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ üí™ \n`;
            message += train;
            bot.telegram.sendMessage(u.telegramId, message)
        });
    } catch (err){
        console.error('failed checkin training');
        console.log(err);
    }

})

bot.launch();

// Start Server
app.get('/', (req, res) => {
    res.sendFile(__dirname + '/index.html');
});

app.listen(PORT, () => {
    console.log(`Bot server started on ${PORT}!`);
});
// Close Server
process.on("SIGINT", async () => {
    //await client.close();
    console.log("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É");
    process.exit();
})