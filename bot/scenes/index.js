const { Scenes, Markup } = require('telegraf');
const User = require('../../models/user');

const PROFILE_SCENE_ID = 'userProfile';

const profileScene = new Scenes.BaseScene(PROFILE_SCENE_ID);

profileScene.enter(async (ctx) => {
    console.log(`User ${ctx.from.id} entered profile scene`);

    ctx.scene.state.profileData = {};
    await ctx.reply(
        '–£–∫–∞–∂–∏—Ç–µ –ø–æ—ç—Ç–∞–ø–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å –≤ —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é:',
        Markup.inlineKeyboard([
            Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_scene')
        ])
    );
});

profileScene.action('cancel_scene', async (ctx) => {
    const telegramId = ctx.from.id;
    console.log(`User ${ctx.from.id} cancelled profile scene via button.`);
    await ctx.answerCbQuery('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
    await ctx.editMessageText('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    try {
        const user = await User.findOne({ telegramId: telegramId });
        if (!user) {
            console.error(`User ${telegramId} not found in DB before saving profile!`);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.');
            return await ctx.scene.leave();
        }
        user.joinedClub = false;
        await user.save();
    } catch (err) {
        console.error(`User ${telegramId} not found in DB`, err);
    }
    return await ctx.scene.leave();
});

profileScene.command('cancel', async (ctx) => {
    const telegramId = ctx.from.id;
    console.log(`User ${ctx.from.id} cancelled profile scene`);
    await ctx.reply('–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω.');
    try {
        const user = await User.findOne({ telegramId: telegramId });
        if (!user) {
            console.error(`User ${telegramId} not found in DB before saving profile!`);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.');
            return await ctx.scene.leave();
        }
        user.joinedClub = false;
        await user.save();
    } catch (err) {
        console.error(`User ${telegramId} not found in DB`, err);
    }
    await ctx.scene.leave();
});

profileScene.on('text', async (ctx) => {
    const currentState = ctx.scene.state.profileData;
    const userAnswer = ctx.message.text.trim();
    const telegramId = ctx.from.id;
    const groupLink = process.env.GROUP_LINK || '–°–°–´–õ–ö–ê_–ù–ê_–ì–†–£–ü–ü–£_–ù–ï_–ó–ê–î–ê–ù–ê';
    try {
        if (!currentState.fullName) {
            if (userAnswer.length < 3) {
                return ctx.reply('–ò–º—è –∏ –§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', Markup.inlineKeyboard([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_scene')]));
            }
            currentState.fullName = userAnswer;
            await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ–ª–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):', Markup.inlineKeyboard([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_scene')]));
            // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

            // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –õ–û–ì–ò–ö–ò –ó–î–ï–°–¨: –û–±—Ä–∞–±–æ—Ç–∫–∞ –î–∞—Ç—ã –†–æ–∂–¥–µ–Ω–∏—è ---
        } else if (!currentState.birthDate) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ birthDate
            // 1. –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
            const dateParts = userAnswer.split('.');
            if (dateParts.length !== 3) {
                return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.1995):', Markup.inlineKeyboard([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_scene')]));
            }

            const day = parseInt(dateParts[0], 10);
            const month = parseInt(dateParts[1], 10);
            const year = parseInt(dateParts[2], 10);

            // 2. –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–µ–ª
            if (isNaN(day) || isNaN(month) || isNaN(year)) {
                return ctx.reply('–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∏. –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì:', Markup.inlineKeyboard([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_scene')]));
            }

            // 3. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≥–æ–¥–∞
            const currentYear = new Date().getFullYear();
            const minYear = currentYear - 120; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç 120 –ª–µ—Ç
            const maxYear = currentYear - 5;   // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç 5 –ª–µ—Ç (–ø—Ä–∏–º–µ—Ä–Ω–æ)
            if (year < minYear || year > maxYear) {
                return ctx.reply(`–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è (${year}) –∫–∞–∂–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω—ã–º. –£–∫–∞–∂–∏—Ç–µ –≥–æ–¥ –º–µ–∂–¥—É ${minYear} –∏ ${maxYear}. –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì:`, Markup.inlineKeyboard([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_scene')]));
            }

            // 4. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–Ω—è –∏ –º–µ—Å—è—Ü–∞)
            // –ú–µ—Å—è—Ü—ã –≤ JS Date –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0 (0=–Ø–Ω–≤–∞—Ä—å, 11=–î–µ–∫–∞–±—Ä—å)
            const monthIndex = month - 1;
            const dateObject = new Date(year, monthIndex, day);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ "–ø–µ—Ä–µ—Å–∫–æ—á–∏–ª–∞" –ª–∏ –¥–∞—Ç–∞ –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –¥–Ω—è/–º–µ—Å—è—Ü–∞
            // –ù–∞–ø—Ä–∏–º–µ—Ä, 31.02.2023 —Å—Ç–∞–Ω–µ—Ç 03.03.2023
            if (dateObject.getFullYear() !== year || dateObject.getMonth() !== monthIndex || dateObject.getDate() !== day) {
                return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):', Markup.inlineKeyboard([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_scene')]));
            }

            // 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–π –¥–∞—Ç—ã –≤ state
            currentState.birthDate = dateObject; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç Date
            console.log(`Received birthDate: ${currentState.birthDate.toISOString()}`); // –õ–æ–≥–∏—Ä—É–µ–º –≤ UTC

            await ctx.reply('–ü—Ä–∏–Ω—è—Ç–æ. –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –≥–æ—Ä–æ–¥–∞ –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?', Markup.inlineKeyboard([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_scene')]));

        } else if (!currentState.district) {
            if (userAnswer.length < 2) {
                return ctx.reply('–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', Markup.inlineKeyboard([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_scene')]));
            }
            currentState.district = userAnswer;
            await ctx.reply('–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +380123456789):', Markup.inlineKeyboard([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_scene')]));

        } else if (!currentState.phone) {
            if (!/^\+?\d{10,15}$/.test(userAnswer.replace(/\s+/g, ''))) {
                return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –º–æ–∂–Ω–æ —Å +):', Markup.inlineKeyboard([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_scene')]));
            }
            currentState.phone = userAnswer;

            console.log(`Profile data collected for user ${telegramId}:`, currentState);
            try {
                const user = await User.findOne({ telegramId: telegramId });
                if (!user) {
                    console.error(`User ${telegramId} not found in DB before saving profile!`);
                    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.');
                    return await ctx.scene.leave();
                }


                user.fullName = currentState.fullName;
                user.birthDate = currentState.birthDate;
                user.district = currentState.district;
                user.phone = currentState.phone;
                user.joinedClub = true;

                await user.save();
                console.log(`User ${telegramId} profile saved successfully.`);
                const formattedBirthDate = currentState.birthDate.toLocaleDateString('ru-RU', {
                    day: '2-digit', month: '2-digit', year: 'numeric'
                });
                await ctx.reply(
                    `–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:
                     üë§ –ò–º—è: ${user.fullName}
                     üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${formattedBirthDate}
                     üìç –†–∞–π–æ–Ω: ${user.district}
                     üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}

                     –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–±! üéâ

                     –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø–µ: ${groupLink}`
                );

            } catch (dbError) {
                console.error(`Failed to save profile for user ${telegramId}:`, dbError);
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
            }
            console.log(`Profile complete for user ${ctx.from.id}:`, currentState);

            await ctx.scene.leave();
        }

    } catch (error) {
        console.error("Error processing text in scene:", error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞".', Markup.inlineKeyboard([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_scene')]));
    }
});


module.exports = {
    profileScene,
    PROFILE_SCENE_ID
};