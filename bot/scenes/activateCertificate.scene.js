const { Scenes, Markup } = require('telegraf');
const Certificate = require('../../models/certificates');
const User = require('../../models/user');
const { getOrCreateUser } = require('../middlewares/auth');

const ACTIVATE_CERT_SCENE_ID = 'activateCertificateScene';
const activateCertScene = new Scenes.BaseScene(ACTIVATE_CERT_SCENE_ID);


activateCertScene.enter(async (ctx) => {
    console.log(`User ${ctx.from.id} entered activate cert scene.`);
    ctx.scene.state.activationData = {};
    await ctx.reply(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤–∞—à–µ–≥–æ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:',
        Markup.inlineKeyboard([
            Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_scene')
        ])
    );
});

activateCertScene.action('cancel_scene', async (ctx) => {
    console.log(`User ${ctx.from.id} cancelled scene via button.`);
    await ctx.answerCbQuery('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
    try {

        await ctx.editMessageText('–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    } catch (e) {

        await ctx.reply('–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    }
    return await ctx.scene.leave();
});

activateCertScene.command('cancel', async (ctx) => {
    console.log(`User ${ctx.from.id} cancelled scene via command.`);
    await ctx.reply('–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    return await ctx.scene.leave();
});


activateCertScene.on('text', async (ctx) => {
    const currentState = ctx.scene.state.activationData;
    const userAnswer = ctx.message.text.trim();
    const telegramId = ctx.from.id;


    try {

        if (!currentState.certificate) {
            const userInputCode = userAnswer.toUpperCase();
            console.log(`User ${telegramId} entered code: ${userInputCode}`);
            if (!userInputCode) {
                return ctx.reply('–ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.', Markup.inlineKeyboard([ Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_scene') ]));
            }


            const certificate = await Certificate.findOne({ code: userInputCode });
            if (!certificate) {
                return ctx.reply(`–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç "${userInputCode}" –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥:`, Markup.inlineKeyboard([ Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_scene') ]));
            }
            if (certificate.status !== '–ê–∫—Ç–∏–≤–µ–Ω') {
                await ctx.reply(`–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç "${userInputCode}" —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω (${certificate.status}) –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.`);
                return await ctx.scene.leave();
            }
            if (certificate.expiresAt && certificate.expiresAt < new Date()) {
                certificate.status = '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω'; await certificate.save();
                await ctx.reply(`–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ "${userInputCode}" –∏—Å—Ç–µ–∫.`);
                return await ctx.scene.leave();
            }

            currentState.certificate = certificate;
            console.log(`Certificate ${certificate.code} validated for user ${telegramId}.`);

            const user = await getOrCreateUser(ctx);


            if (user && user.joinedClub && user.fullName && user.phone) {
                console.log(`User ${telegramId} is already registered. Skipping data collection.`);

                return await finalizeActivation(ctx);
            } else {

                console.log(`User ${telegramId} needs profile data. Requesting Full Name.`);
                currentState.needsData = true;
                await ctx.reply('–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω! üëç\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é:', Markup.inlineKeyboard([ Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_scene') ]));
            }
        } else if (currentState.needsData && !currentState.fullName) {
            if (userAnswer.length < 3) {
                return ctx.reply('–ò–º—è –∏ –§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', Markup.inlineKeyboard([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_scene')]));
            }
            currentState.fullName = userAnswer;
            console.log(`Received fullName: ${userAnswer} for user ${telegramId}`);
            await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', Markup.inlineKeyboard([ Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_scene') ]));


        } else if (currentState.needsData && !currentState.phone) {
            if (!/^\+?\d{10,15}$/.test(userAnswer.replace(/\s+/g, ''))) {
                return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:', Markup.inlineKeyboard([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_scene')]));
            }
            currentState.phone = userAnswer;
            console.log(`Received phone: ${userAnswer} for user ${telegramId}. All data collected.`);

            return await finalizeActivation(ctx);
        }

    } catch (error) {
        console.error(`Error in activateCertScene for user ${telegramId}:`, error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
        await ctx.scene.leave();
    }
});



async function finalizeActivation(ctx) {
    const telegramId = ctx.from.id;
    const state = ctx.scene.state.activationData;
    const certificate = state.certificate;
    const adminChatId = process.env.ADMIN_CHAT_ID;

    console.log(`Finalizing activation for user ${telegramId}, cert ${certificate.code}`);

    try {
        const user = await getOrCreateUser(ctx);

        user.pixels = (user.pixels || 0) + certificate.nominal;
        if (state.needsData) {
            user.fullName = state.fullName;
            user.phone = state.phone;
        }
        await user.save();
        console.log(`User ${telegramId} data updated. Pixels: ${user.pixels}`);

        certificate.status = '–ü–æ–≥–∞—à–µ–Ω';
        certificate.redeemedAt = new Date();
        certificate.redeemedBy = telegramId;
        await certificate.save();
        console.log(`Certificate ${certificate.code} status set to '–ü–æ–≥–∞—à–µ–Ω'.`);

        if (adminChatId) {
            try {

                const activationTime = certificate.redeemedAt


                const userInfo = user.username
                    ? `@${user.username}`
                    : (user.name || `ID: ${telegramId}`);


                let adminMessage = `üîî –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n\n` +
                    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userInfo}\n` +
                    `–ö–æ–¥: ${certificate.code}\n` +
                    `–ù–æ–º–∏–Ω–∞–ª: ${certificate.nominal} ${certificate.currency}\n` +
                    `–í—Ä–µ–º—è: ${activationTime}\n`;


                adminMessage += `\n–°–æ–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ:\n` +
                    `  –ò–º—è: ${user.fullName || '....'}\n` +
                    `  –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '...'}\n`;


                await ctx.telegram.sendMessage(adminChatId, adminMessage);
                console.log(`Admin notification sent successfully to ${adminChatId}.`);

            } catch (adminNotifyError) {
                console.error(`Failed to send notification to admin ${adminChatId}:`, adminNotifyError);
            }
        } else {
            console.warn("ADMIN_CHAT_ID is not set in environment variables. Skipping admin notification.");
        }

        const finalMessage = `‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç "${certificate.code}" —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n` +
            `–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: ${certificate.nominal} ${certificate.currency}.\n\n` +
            `–°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.\n\n` +
            `üìÖ **–ë–ª–∏–∂–∞–π—à–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n` +
            `*–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏* (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è)`;

        await ctx.reply(finalMessage,  Markup.keyboard([
            ["üö¥ Join Club üö¥", "üö¥ Next training"],
            ["üóìÔ∏è Training List", "üìà Rank"],
            [ "‚≠êÔ∏è Rate us", "üë• Share"],
        ])
            .resize(),);

    } catch (dbError) {
        console.error(`Error during final activation for user ${telegramId}:`, dbError);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
    } finally {
        await ctx.scene.leave();
    }
}


activateCertScene.on('message', async (ctx) => {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞".', Markup.inlineKeyboard([ Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_scene') ]));
});



module.exports = {
    activateCertScene,
    ACTIVATE_CERT_SCENE_ID
};