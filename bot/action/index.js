const Training = require('../../models/training.js');
const User = require('../../models/user.js');
const { getOrCreateUser, checkUserName, checkAdmin } = require('../middlewares/auth.js');
const { parseDate } = require('../utils/dateUtils');

const { isAdmin } = require('../middlewares/auth.js');
const {Telegraf} = require("telegraf");
const bot = new Telegraf(process.env.BOT_TOKEN);
// –ö—ç—à –Ω–∞ –æ—Å–Ω–æ–≤–µ Set
const actionCache = new Set(); // –•—Ä–∞–Ω–∏—Ç —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "telegramId_trainingId_action"

async function addTrainingHelper(ctx, time, location) {

    if (!await isAdmin(ctx)) return ctx.answerCbQuery('–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤');

    const today = new Date();
    today.setDate(today.getDate() + 1);
    const date = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    try {

        const existing = await Training.findOne({ date, time, location });
        if (existing) {
            await ctx.answerCbQuery('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return;
        }
        const newTraining = new Training({ date, time, location, participants: [] });
        await newTraining.save();
        await ctx.reply(`‚ûï –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${date} –≤ ${time} (${location})`);
        await ctx.answerCbQuery('–î–æ–±–∞–≤–ª–µ–Ω–æ!');
    } catch (err) {
        console.error(`Action Error (add ${time} ${location}):`, err);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
    }
}

async function deleteTrainingHelper(ctx, time, location) {
    // !!! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Date/hours/minutes –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ !!!
    if (!await isAdmin(ctx)) return ctx.answerCbQuery('–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤');

    const today = new Date();
    today.setDate(today.getDate() + 1); // –ò—â–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    const date = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    try {
        const result = await Training.deleteOne({ date, time, location });
        if (result.deletedCount > 0) {
            await ctx.reply(`‚ûñ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞: ${date} –≤ ${time} (${location})`);
            await ctx.answerCbQuery('–£–¥–∞–ª–µ–Ω–æ!');
        } else {
            await ctx.answerCbQuery('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
    } catch (err) {
        console.error(`Action Error (delete ${time} ${location}):`, err);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
    }
}

async function deleteAllUpcomingTrainings(ctx) {
    if (!await isAdmin(ctx)) return ctx.answerCbQuery('–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤');

    const today = new Date();

    try {
        const trainings = await Training.find(); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ
        const upcomingTrainings = trainings.filter(t => parseDate(t.date) >= today); // –§–∏–ª—å—Ç—Ä—É–µ–º

        if (!upcomingTrainings.length) {
            return ctx.answerCbQuery('–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
        }

        const idsToDelete = upcomingTrainings.map(t => t._id);
        const result = await Training.deleteMany({ _id: { $in: idsToDelete } });

        await ctx.reply(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.`);
        await ctx.answerCbQuery('–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —É–¥–∞–ª–µ–Ω—ã!');
    } catch (err) {
        console.error('Action Error (deleteAllUpcoming):', err);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
    }
}

async function handleCustomWorkout(ctx) {
    if (!await isAdmin(ctx)) return ctx.answerCbQuery('–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤');
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const date = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    const location = "–õ–æ–∫–∞—Ü–∏—è";
    const time = '08:30';
    const draftMessage = `/addtraining ${date} ${time} ${location}`;
    await ctx.reply( `–°–∫–æ–ø–∏—Ä—É–π –∏ –∏–∑–º–µ–Ω–∏: \`${draftMessage}\``, { parse_mode: 'MarkdownV2' }); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è `
    await ctx.answerCbQuery();
}

async function handleGoAction(ctx, match) {
    await checkUserName(ctx, () => {}); // –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –≤—Ä—É—á–Ω—É—é
    const trainingId = match[1];
    const telegramId = ctx.from.id;
    const cacheKey = `${telegramId}_${trainingId}_go`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∫—ç—à-–∫–ª—é—á –¥–ª—è go/notgo
    const cacheKeyOther = `${telegramId}_${trainingId}_notgo`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –∫—ç—à–∞
    if (actionCache.has(cacheKey) || actionCache.has(cacheKeyOther)) {
        console.log(`Action already processed for user ${telegramId}, training ${trainingId}`);
        return ctx.answerCbQuery('–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏');
    }

    try {
        const user = await getOrCreateUser(ctx);
        const training = await Training.findById(trainingId);
        const threadId = Number(process.env.GROUP_CHAT_THREAD_TRAINING);
        const groupId = process.env.GROUP_CHAT_ID;

        if (!training) {
            if (groupId && threadId) await bot.telegram.sendMessage(groupId, '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', { message_thread_id: threadId });
            return ctx.answerCbQuery('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        if (!training.participants.some(id => id.equals(user._id))) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ equals –¥–ª—è ObjectId
            training.participants.push(user._id);
            // !!! –õ–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª–µ–π - –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å !!!
            user.pixels = (user.pixels || 0) + 1; // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            await training.save();
            await user.save();

            if (groupId && threadId) {
                await bot.telegram.sendMessage(
                    process.env.GROUP_CHAT_ID,
                    `‚úÖ @${ctx.from.username} –æ—Ç–º–µ—á–µ–Ω –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.`,
                    { message_thread_id: threadId }
                );
            }
            actionCache.add(cacheKey); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
            ctx.answerCbQuery('–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!');
        } else {
            ctx.answerCbQuery('–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã');
        }
    } catch (err) {
        console.error('Error in go action:', err);
        // –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç
        ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

async function handleNotGoAction(ctx, match) {
    await checkUserName(ctx, () => {}); // –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –≤—Ä—É—á–Ω—É—é
    const trainingId = match[1];
    const telegramId = ctx.from.id;
    const cacheKey = `${telegramId}_${trainingId}_notgo`;
    const cacheKeyOther = `${telegramId}_${trainingId}_go`;

    if (actionCache.has(cacheKey) || actionCache.has(cacheKeyOther)) {
        console.log(`Action already processed for user ${telegramId}, training ${trainingId}`);
        return ctx.answerCbQuery('–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏');
    }

    try {
        const user = await getOrCreateUser(ctx); // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const threadId = Number(process.env.GROUP_CHAT_THREAD_TRAINING);
        const groupId = process.env.GROUP_CHAT_ID;

        if (groupId && threadId) {
            await bot.telegram.sendMessage(groupId, `:_( @${user.username || user.name} –Ω–µ —Å–º–æ–∂–µ—Ç`, { message_thread_id: threadId });
        }
        actionCache.add(cacheKey); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
        ctx.answerCbQuery('–ñ–∞–ª—å :(');
    } catch (err) {
        console.error('Error in notgo action:', err);
        ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

async function handleJoinAgree(ctx) {
    const groupLink = process.env.GROUP_LINK || 'https://t.me/your_group_invite_link'; // –°—Å—ã–ª–∫–∞ –∏–∑ .env
    try {
        const user = await getOrCreateUser(ctx); // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        if (user.joinedClub) {
            await ctx.editMessageText(`–í—ã —É–∂–µ –≤ –∫–ª—É–±–µ! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É:\n${groupLink}`);
            return ctx.answerCbQuery('–í—ã —É–∂–µ –≤ –∫–ª—É–±–µ!');
        }

        user.joinedClub = true;
        await user.save();

        await ctx.editMessageText(
            `–û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –∫–ª—É–±–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ –≤ Telegram:\n${groupLink}`
        );
        // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É –æ –Ω–æ–≤–æ–º —á–ª–µ–Ω–µ
        // await ctx.telegram.sendMessage(process.env.ADMIN_CHAT_ID, `@${user.username || user.name} –≤—Å—Ç—É–ø–∏–ª –≤ –∫–ª—É–± —á–µ—Ä–µ–∑ –±–æ—Ç–∞.`);
        ctx.answerCbQuery('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
    } catch (err){
        console.error('Failed Join club agree:', err);
        ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
}

async function handleJoinDecline(ctx) {
    try {
        await ctx.editMessageText(
            '–ñ–∞–ª—å, —á—Ç–æ –≤—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ "üö¥ Join Club üö¥" —Å–Ω–æ–≤–∞!'
            // { parse_mode: 'Markdown' } // Markdown –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        );
        await ctx.answerCbQuery();
    } catch (err) {
        console.error('Failed Join club decline:', err);
        // –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å
        try { await ctx.answerCbQuery(); } catch {}
    }
}

const regexActionHandlers = [
    { regex: /go_(.+)/, handler: handleGoAction },
    { regex: /notgo_(.+)/, handler: handleNotGoAction },
    // { regex: /join_(.+)/, handler: handleGroupJoinAction }
];

const actionHandlersMap = {
    'addTomarrow7': (ctx) => addTrainingHelper(ctx, '07:00', 'I‚ù§Ô∏èArcadia - –¢–ó'),
    'addTomarrow8': (ctx) => addTrainingHelper(ctx, '08:00', 'I‚ù§Ô∏èArcadia - –¢–ó'),
    'addTomarrow10': (ctx) => addTrainingHelper(ctx, '10:00', 'I‚ù§Ô∏èArcadia - –¢–ó'),
    'addHeel8': (ctx) => addTrainingHelper(ctx, '08:00', '–ú–∞—Ä—à–∞–ª-–ü—è—Ç–∞–∫ üêΩ'),
    'addHeel10': (ctx) => addTrainingHelper(ctx, '10:00', '–ú–∞—Ä—à–∞–ª-–ü—è—Ç–∞–∫ üêΩ'),
    'addCoffe18': (ctx) => addTrainingHelper(ctx, '18:00', 'I‚ù§Ô∏èArcadia - –¢–ó'),
    'delTomarrow7': (ctx) => deleteTrainingHelper(ctx, '07:00', 'I‚ù§Ô∏èArcadia - –¢–ó'),
    'delTomarrow8': (ctx) => deleteTrainingHelper(ctx, '08:00', 'I‚ù§Ô∏èArcadia - –¢–ó'),
    'delTomarrow10': (ctx) => deleteTrainingHelper(ctx, '10:00', 'I‚ù§Ô∏èArcadia - –¢–ó'),
    'delHeel8': (ctx) => deleteTrainingHelper(ctx, '08:00', '–ú–∞—Ä—à–∞–ª-–ü—è—Ç–∞–∫ üêΩ'),
    'delHeel10': (ctx) => deleteTrainingHelper(ctx, '10:00', '–ú–∞—Ä—à–∞–ª-–ü—è—Ç–∞–∫ üêΩ'), // delHeel0 -> delHeel10
    'delCoffe18': (ctx) => deleteTrainingHelper(ctx, '18:00', 'I‚ù§Ô∏èArcadia - –¢–ó'),
    'delAllWorkout': deleteAllUpcomingTrainings,
    'customWorkout': handleCustomWorkout,
    'join_agree': handleJoinAgree,
    'join_decline': handleJoinDecline,
};

async function handleCallbackQuery(ctx) {
    const data = ctx.callbackQuery.data;
    console.log(`Callback query received: ${data}`);


    if (actionHandlersMap[data]) {
        try {
            await actionHandlersMap[data](ctx);
        } catch (err) {
            console.error(`Error executing exact action handler for "${data}":`, err);
            try { await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'); } catch {}
        }
        return;
    }


    for (const item of regexActionHandlers) {
        const match = data.match(item.regex);
        if (match) {
            try {
                await item.handler(ctx, match);
            } catch (err) {
                console.error(`Error executing regex action handler for "${data}" (Regex: ${item.regex}):`, err);
                try { await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'); } catch {}
            }
            return;
        }
    }


    console.warn(`No handler found for callback query data: ${data}`);
    try {
        await ctx.answerCbQuery();
    } catch (err) {
        console.error("Error answering fallback callback query:", err);
    }
}

module.exports = {
    handleCallbackQuery};