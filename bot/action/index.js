const Training = require('../../models/training.js');
const User = require('../../models/user.js');
const { Scenes } = require('telegraf');
const { PROFILE_SCENE_ID } = require('../scenes');
const { getOrCreateUser, checkUserName, checkAdmin } = require('../middlewares/auth.js');
const { parseDate } = require('../utils/dateUtils');
const { getText } =  require('../../locales');

const { isAdmin } = require('../middlewares/auth.js');
const {Telegraf} = require("telegraf");
const bot = new Telegraf(process.env.BOT_TOKEN);

const actionCache = new Set();

async function addTrainingHelper(ctx, time, location) {

    if (!await isAdmin(ctx)) return ctx.answerCbQuery('–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤');

    const today = new Date();
    today.setDate(today.getDate() + 1);
    const date = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    try {

        const existing = await Training.findOne({ date, time, location });
        if (existing) {
            await ctx.answerCbQuery('–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∂–µ —ñ—Å–Ω—É—î');
            return;
        }
        const newTraining = new Training({ date, time, location, participants: [] });
        await newTraining.save();
        await ctx.reply(`‚ûï –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ: ${date} –≤ ${time} (${location})`);
        await ctx.answerCbQuery('–î–æ–¥–∞–Ω–æ!');
    } catch (err) {
        console.error(`Action Error (add ${time} ${location}):`, err);
        await ctx.answerCbQuery('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è');
    }
}

async function deleteTrainingHelper(ctx, time, location) {

    if (!await isAdmin(ctx)) return ctx.answerCbQuery('–¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤');

    const today = new Date();
    today.setDate(today.getDate() + 1); // –ò—â–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    const date = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    try {
        const result = await Training.deleteOne({ date, time, location });
        if (result.deletedCount > 0) {
            await ctx.reply(`‚ûñ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ: ${date} –≤ ${time} (${location})`);
            await ctx.answerCbQuery('–í–∏–¥–∞–ª–µ–Ω–æ!');
        } else {
            await ctx.answerCbQuery('–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }
    } catch (err) {
        console.error(`Action Error (delete ${time} ${location}):`, err);
        await ctx.answerCbQuery('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è');
    }
}

async function deleteAllUpcomingTrainings(ctx) {
    if (!await isAdmin(ctx)) return ctx.answerCbQuery('–¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤');

    const today = new Date();

    try {
        const trainings = await Training.find();
        const upcomingTrainings = trainings.filter(t => parseDate(t.date) >= today);

        if (!upcomingTrainings.length) {
            return ctx.answerCbQuery('–ù–µ–º–∞—î –º–∞–π–±—É—Ç–Ω—ñ—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.');
        }

        const idsToDelete = upcomingTrainings.map(t => t._id);
        const result = await Training.deleteMany({ _id: { $in: idsToDelete } });

        await ctx.reply(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ ${result.deletedCount} –º–∞–π–±—É—Ç–Ω—ñ—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.`);
        await ctx.answerCbQuery('–ú–∞–π–±—É—Ç–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ!');
    } catch (err) {
        console.error('Action Error (deleteAllUpcoming):', err);
        await ctx.answerCbQuery('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è');
    }
}

async function handleCustomWorkout(ctx) {
    if (!await isAdmin(ctx)) return ctx.answerCbQuery('–¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤');
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const date = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    const location = "–õ–æ–∫–∞—Ü–∏—è";
    const time = '08:30';
    const draftMessage = `/addtraining ${date} ${time} ${location}`;
    await ctx.reply( `–°–∫–æ–ø—ñ—é–π —ñ –∑–º—ñ–Ω–∏: \`${draftMessage}\``, { parse_mode: 'MarkdownV2' });
    await ctx.answerCbQuery();
}

async function handleNotGoAction(ctx, match) {
    await checkUserName(ctx, next => {});
    const trainingId = match[1];
    const telegramId = ctx.from.id;
    const cacheKey = `${telegramId}_${trainingId}_notgo`;
    const cacheKeyOther = `${telegramId}_${trainingId}_go`;

    if (actionCache.has(cacheKey) || actionCache.has(cacheKeyOther)) {
        console.log(`Action already processed for user ${telegramId}, training ${trainingId}`);
        return ctx.answerCbQuery('–í–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏');
    }

    try {
        const user = await getOrCreateUser(ctx);
        const threadId = Number(process.env.GROUP_CHAT_THREAD_TRAINING);
        const groupId = process.env.GROUP_CHAT_ID;

        if (groupId && threadId) {
            await bot.telegram.sendMessage(groupId, `:_( @${user.username || user.name} –Ω–µ —Å–º–æ–∂–µ—Ç`, { message_thread_id: threadId });
        }
        actionCache.add(cacheKey);
        ctx.answerCbQuery('–®–∫–æ–¥–∞ :(');
    } catch (err) {
        console.error('Error in notgo action:', err);
        ctx.answerCbQuery('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞');
    }
}

async function handleGoAction(ctx, match) {
    await checkUserName(ctx, () => {});
    const trainingId = match[1];
    const telegramId = ctx.from.id;
    const cacheKey = `${telegramId}_${trainingId}_go`;
    const cacheKeyOther = `${telegramId}_${trainingId}_notgo`;


    if (actionCache.has(cacheKey) || actionCache.has(cacheKeyOther)) {
        console.log(`Action already processed for user ${telegramId}, training ${trainingId}`);
        return ctx.answerCbQuery('–í–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏');
    }

    try {
        const user = await getOrCreateUser(ctx);
        const training = await Training.findById(trainingId);
        const threadId = Number(process.env.GROUP_CHAT_THREAD_TRAINING);
        const groupId = process.env.GROUP_CHAT_ID;

        if (!training) {
            if (groupId && threadId) await bot.telegram.sendMessage(groupId, '–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', { message_thread_id: threadId });
            return ctx.answerCbQuery('–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
        }

        if (!training.participants.some(id => id.equals(user._id))) {
            training.participants.push(user._id);

            user.pixels = (user.pixels || 0) + 1;
            await training.save();
            await user.save();

            if (groupId && threadId) {
                await bot.telegram.sendMessage(
                    process.env.GROUP_CHAT_ID,
                    `‚úÖ @${ctx.from.username} –≤—ñ–¥–∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—ñ.`,
                    { message_thread_id: threadId }
                );
            }
            actionCache.add(cacheKey);
            ctx.answerCbQuery('–í–∏ –∑–∞–ø–∏—Å–∞–ª–∏—Å—è!');
        } else {
            ctx.answerCbQuery('–í–∏ –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ñ');
        }
    } catch (err) {
        console.error('Error in go action:', err);

        ctx.answerCbQuery('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞');
    }
}



async function handleJoinAgree(ctx) {
    const groupLink = process.env.GROUP_LINK || 'https://t.me/your_group_invite_link'; //
    try {
        const user = await getOrCreateUser(ctx);

        if (user.joinedClub) {
            await ctx.editMessageText(`–í–∏ –≤–∂–µ –≤ –∫–ª—É–±—ñ! –û—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É:\n${groupLink}`);
            return ctx.answerCbQuery('–í–∏ –≤–∂–µ –≤ –∫–ª—É–±—ñ!');
        }


        await user.save();

        await ctx.editMessageText(
            '–ß—É–¥–æ–≤–æ! –í–∏ –ø—Ä–∏–π–Ω—è–ª–∏ —É–º–æ–≤–∏ –∫–ª—É–±—É. –¢–µ–ø–µ—Ä –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–≤–Ω–∏–º–æ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å.'
        );
        ctx.answerCbQuery('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!');

        await ctx.scene.enter(PROFILE_SCENE_ID);


    } catch (err){
        console.error('Failed Join club agree:', err);
        ctx.answerCbQuery('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.');
    }
}

async function handleJoinDecline(ctx) {
    try {
        const joinClubBtn = getText('joinClubBtn');
        await ctx.editMessageText(
            `–®–∫–æ–¥–∞, —â–æ –≤–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—è. –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \`${joinClubBtn}\` –∑–Ω–æ–≤—É!`

        );
        await ctx.answerCbQuery();
    } catch (err) {
        console.error('Failed Join club decline:', err);

        try { await ctx.answerCbQuery(); } catch {}
    }
}

const regexActionHandlers = [
    { regex: /notgo_(.+)/, handler: handleNotGoAction },
    { regex: /go_(.+)/, handler: handleGoAction },
    // { regex: /join_(.+)/, handler: handleGroupJoinAction }
];

const actionHandlersMap = {
    'addTomarrow7': (ctx) => addTrainingHelper(ctx, '07:00', 'I‚ù§Ô∏èArcadia - –¢–ó'),
    'addTomarrow8': (ctx) => addTrainingHelper(ctx, '08:00', 'I‚ù§Ô∏èArcadia - –¢–ó'),
    'addTomarrow10': (ctx) => addTrainingHelper(ctx, '10:00', 'I‚ù§Ô∏èArcadia - –¢–ó'),
    'addHeel8': (ctx) => addTrainingHelper(ctx, '08:00', '–ú–∞—Ä—à–∞–ª-–ü—è—Ç–∞–∫ üêΩ'),
    'addHeel10': (ctx) => addTrainingHelper(ctx, '10:00', '–ú–∞—Ä—à–∞–ª-–ü—è—Ç–∞–∫ üêΩ'),
    'addCoffe18': (ctx) => addTrainingHelper(ctx, '18:00', 'I‚ù§Ô∏èArcadia - –¢–ó'),
    'delTomarrow7': (ctx) => deleteTrainingHelper(ctx, '07:00', 'I‚ù§Ô∏èArcadia - –¢–ó'),
    'delTomarrow8': (ctx) => deleteTrainingHelper(ctx, '08:00', 'I‚ù§Ô∏èArcadia - –¢–ó'),
    'delTomarrow10': (ctx) => deleteTrainingHelper(ctx, '10:00', 'I‚ù§Ô∏èArcadia - –¢–ó'),
    'delHeel8': (ctx) => deleteTrainingHelper(ctx, '08:00', '–ú–∞—Ä—à–∞–ª-–ü—è—Ç–∞–∫ üêΩ'),
    'delHeel10': (ctx) => deleteTrainingHelper(ctx, '10:00', '–ú–∞—Ä—à–∞–ª-–ü—è—Ç–∞–∫ üêΩ'), // delHeel0 -> delHeel10
    'delCoffe18': (ctx) => deleteTrainingHelper(ctx, '18:00', 'I‚ù§Ô∏èArcadia - –¢–ó'),
    'delAllWorkout': deleteAllUpcomingTrainings,
    'customWorkout': handleCustomWorkout,
    'join_agree': handleJoinAgree,
    'join_decline': handleJoinDecline,
};

async function handleCallbackQuery(ctx) {
    const data = ctx.callbackQuery.data;
    console.log(`Callback query received: ${data}`);


    if (actionHandlersMap[data]) {
        try {
            await actionHandlersMap[data](ctx);
        } catch (err) {
            console.error(`Error executing exact action handler for "${data}":`, err);
            try { await ctx.answerCbQuery('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞'); } catch {}
        }
        return;
    }


    for (const item of regexActionHandlers) {
        const match = data.match(item.regex);
        if (match) {
            try {
                await item.handler(ctx, match);
            } catch (err) {
                console.error(`Error executing regex action handler for "${data}" (Regex: ${item.regex}):`, err);
                try { await ctx.answerCbQuery('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞'); } catch {}
            }
            return;
        }
    }


    console.warn(`No handler found for callback query data: ${data}`);
    try {
        await ctx.answerCbQuery();
    } catch (err) {
        console.error("Error answering fallback callback query:", err);
    }
}

module.exports = {
    handleCallbackQuery
};