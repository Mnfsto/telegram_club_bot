const Training = require("../../../models/training");
const {parseDate, formatDates} = require("../../utils/dateUtils");

async function handleNextTraining (ctx) {
    const now = new Date();
    const today = formatDates(now);
    const tomorrowDay = new Date(now); // Create a new date object
    tomorrowDay.setDate(tomorrowDay.getDate() + 1);
    const tomorrow = formatDates(tomorrowDay);

    try {

        const allFutureTrainings = await Training.find({ date: { $gte: today } }).sort({ date: 1, time: 1 });

        const trainingsToday = allFutureTrainings.filter(training => training.date === today);
        const tomorrowTrainings = allFutureTrainings.filter(training => training.date === tomorrow);

        if (!trainingsToday || trainingsToday.length === 0) {
             ctx.reply('–ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.');
        }

        let message = '–†–æ–∑–∫–ª–∞–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n';
        trainingsToday.forEach(t => {
            message += `üìÖ ${t.date} –æ ${t.time}, üìç ${t.location}\n`;
        });

        console.log(tomorrowTrainings)
        if (tomorrowTrainings.length > 0) {
            message = '\n–ó–∞–≤—Ç—Ä–∞:\n';
            tomorrowTrainings.forEach(t => {
                 message += `üìÖ ${t.date} –æ ${t.time}, üìç ${t.location}\n`;
            });
        } else {
            return message = `–ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞`;
        }
        ctx.reply(message);
    } catch (err){
        console.error('failed checkin training');
        console.log(err);
        ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.');
    }
}

module.exports = handleNextTraining;