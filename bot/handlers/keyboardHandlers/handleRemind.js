const Training = require("../../../models/training");
const User = require("../../../models/user");

async function handleRemind (ctx) {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    const formattedDate = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;

    try {
        const nextTraining = await Training.findOne({date: formattedDate});
        if (nextTraining === null) return ctx.reply("–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É !");
        const participants = nextTraining.participants;


        const users = await User.find({ _id: { $in: participants } });
        console.log("–†–∞—Å—Å—ã–ª–∞—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", formattedDate);
        const train = `üìÖ ${nextTraining.date} –≤ ${nextTraining.time}, üìç ${nextTraining.location}\n`;
        console.log(train);
        let successCount = 0;
        for (const user of users) {
            const message = `–ü—Ä–∏–≤–µ—Ç, @${user.username || user.telegramId}! –ó–∞–≤—Ç—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ üí™\n${train}`;
            try {
                await bot.telegram.sendMessage(user.telegramId, message);
                successCount++;
                console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${user.username || user.telegramId}`);
            } catch (err) {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${user.telegramId}:`, err);
            }
        }

        ctx.reply(`–£–≤–µ–¥–æ–º–ª–µ–Ω–æ ${successCount} –∏–∑ ${users.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.`);
    } catch (err){
        console.error('failed checkin training');
        console.log(err);
    }

}

module.exports = handleRemind;