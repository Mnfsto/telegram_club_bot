const Training = require("../../../models/training");
const User = require("../../../models/user");
const { formatDates } = require("../../utils/dateUtils");

module.exports = function (bot){
    return async function handleRemind (ctx) {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);

        const formattedDate = formatDates ? formatDates(tomorrow) : `${tomorrow.getDate().toString().padStart(2, '0')}.${(tomorrow.getMonth() + 1).toString().padStart(2, '0')}.${tomorrow.getFullYear()}`;

        try {

            const trainingsTomorrow = await Training.find({ date: formattedDate }).sort({ time: 1 });

            if (!trainingsTomorrow || trainingsTomorrow.length === 0) {
                return ctx.reply("–ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.");
            }

            let totalParticipants = 0;
            let totalSuccessCount = 0;

            console.log(`–†–æ–∑—Å–∏–ª–∞—é –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –Ω–∞ ${formattedDate}`);

            for (const training of trainingsTomorrow) {
                if (!training.participants || training.participants.length === 0) {
                    console.log(`–ù–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ${training.date} –æ ${training.time}.`);
                    continue;
                }

                const participants = training.participants;
                const users = await User.find({ _id: { $in: participants } });
                totalParticipants += users.length;

                const trainInfo = `üìÖ ${training.date} –æ ${training.time}, üìç ${training.location}\n`;
                console.log(`–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è: ${trainInfo}`);

                let successCount = 0;
                for (const user of users) {
                    const message = `–ü—Ä–∏–≤—ñ—Ç, @${user.username || user.telegramId}! –ó–∞–≤—Ç—Ä–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è üí™\n${trainInfo}`;
                    try {
                        await bot.telegram.sendMessage(user.telegramId, message);
                        successCount++;
                        console.log(`–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ ${user.username || user.telegramId}`);
                    } catch (err) {

                        if (err.code === 403 || err.description.includes('chat not found') || err.description.includes('bot was blocked')) {
                            console.warn(`–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${user.telegramId} (${user.username || 'N/A'}): ${err.description}. –ú–æ–∂–ª–∏–≤–æ, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞.`);

                        } else {
                            console.error(`–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è ${user.telegramId}:`, err);
                        }
                    }
                }
                totalSuccessCount += successCount;
                console.log(`–°–ø–æ–≤—ñ—â–µ–Ω–æ ${successCount} –∑ ${users.length} —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ${training.time}.`);
            }

            ctx.reply(`–ó–∞–≥–∞–ª–æ–º —Å–ø–æ–≤—ñ—â–µ–Ω–æ ${totalSuccessCount} –∑ ${totalParticipants} —É—á–∞—Å–Ω–∏–∫—ñ–≤ –ø—Ä–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ ${formattedDate}.`);

        } catch (err){
            console.error('failed sending reminders');
            console.log(err);
            ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.');
        }
    }
};