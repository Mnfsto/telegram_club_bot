const Training = require("../../../models/training");
const {Markup} = require("telegraf");

async function handleShare (ctx) {
    const today = new Date();
    today.setDate(today.getDate());
    const formattedDate = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;

    const nextTraining = await Training.findOne({ date: formattedDate });
    if (!nextTraining) {
        return ctx.reply('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    }

    const shareText = `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!\nüìÖ ${nextTraining.date} –≤ ${nextTraining.time}\nüìç ${nextTraining.location}\n–£–∑–Ω–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É –±–æ—Ç–∞!`;

    const botUsername = '@PixelCoachBot';
    const shareLink = `https://t.me/${botUsername}?start=training_${nextTraining._id}`;


    await ctx.reply(
        `${shareText}\n\n–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:`,
        Markup.inlineKeyboard([
            Markup.button.switchToChat('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è', `${shareText}\n${shareLink}`)
        ])
    );
}

module.exports = handleShare;