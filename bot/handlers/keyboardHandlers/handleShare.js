const Training = require("../../../models/training");
const {Markup} = require("telegraf");

async function handleShare (ctx) {
    const today = new Date();
    today.setDate(today.getDate()+1);
    const formattedDate = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;

    const nextTraining = await Training.findOne({ date: formattedDate });
    if (!nextTraining) {

        return ctx.reply('–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
    }


    const locationText = nextTraining.location || '–ú—ñ—Å—Ü–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ';


    const shareText = `–ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!\nüìÖ ${nextTraining.date} –æ ${nextTraining.time}\nüìç ${locationText}\n–î—ñ–∑–Ω–∞–π—Å—è –ø–æ–¥—Ä–æ–±–∏—Ü—ñ —É –±–æ—Ç–∞!`;

    const botUsername = process.env.BOT_USERNAME || '@PixelCoachBot';
    const shareLink = `https://t.me/${botUsername}?start=training_${nextTraining._id}`;


    await ctx.reply(
        `${shareText}\n\n–ó–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–∑—ñ–≤ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∏–∂—á–µ:`,
        Markup.inlineKeyboard([
            Markup.button.switchToChat('–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å', `${shareText}\n${shareLink}`)
        ])
    );
}

module.exports = handleShare;