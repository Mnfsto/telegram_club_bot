const {Markup} = require("telegraf");
const Training = require('../../../models/training');
const {parseDate, formatDates} = require("../../utils/dateUtils"); // Assuming formatDates exists from previous examples

const keyboardAddWorkout = Markup.inlineKeyboard([
    [Markup.button.callback("–î–æ–¥–∞—Ç–∏ –ó–∞–≤—Ç—Ä–∞ 411 –ë. 18:00", "add411_18")],
    [Markup.button.callback("–î–æ–¥–∞—Ç–∏ –ó–∞–≤—Ç—Ä–∞ I‚ù§Ô∏èA 10:00", "addILA_10")],
    [Markup.button.callback("–î–æ–¥–∞—Ç–∏ –ó–∞–≤—Ç—Ä–∞ –õ–∞–Ω–∂. 11:00", "addLanzh_11")],
    [Markup.button.callback("–î–æ–¥–∞—Ç–∏ –í—Ä—É—á–Ω—É", "customWorkout")],
]);

async function handleAddWorkout (ctx){
    ctx.reply(
        "–©–æ–± –¥–æ–¥–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è /addtraining –î–î.–ú–ú.–†–†–†–† –ì–ì:–•–• –ú—ñ—Å—Ü–µ",
        keyboardAddWorkout,
    );

    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const formattedTomorrow = formatDates(tomorrow);

    try {

        const trainingsTomorrow = await Training.find({ date: formattedTomorrow }).sort({ time: 1 }); // Sort by time for tomorrow

        if (!trainingsTomorrow.length) {

            return ctx.reply('–ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞.');
        }


        let message = '–†–æ–∑–∫–ª–∞–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n';
        trainingsTomorrow.forEach(t => {
            message += `üìÖ ${t.date} –æ ${t.time}, üìç ${t.location}\n`;
        });
        ctx.reply(message);
    } catch (err){
        console.error('failed checkin training');
        console.log(err);

        ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.');
    }
};

module.exports = handleAddWorkout;