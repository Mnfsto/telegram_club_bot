const Training = require("../../../models/training");
const {parseDate} = require("../../utils/dateUtils");
const User = require("../../../models/user");

async function handleCheckIt (ctx) {
    const today = new Date();
    const formattedDate =`${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
    try {

        const trainings = await Training.find({ date: { $gte: formattedDate } }).sort({ date: 1 });
        const nextTrainings = trainings.filter(training => {
            const trainingDate = parseDate(training.date);
            return trainingDate >= today;
        });
        if (!trainings) return ctx.reply('–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.');
        let message = '';
        let groupSize = 0;
        for (const training of nextTrainings) {
            const listParticipants = training.participants;
            const participants = await User.find({ _id: { $in: listParticipants } });

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            const participantList = participants.length
                ? participants.map((user, index) => `${index + 1}. @${user.username}`).join('\n')
                : '–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤';
            groupSize +=1;
            message += `üìÖ *${training.date} –≤ ${training.time}* (${training.location || '–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}):\n${participantList}\n\n`;
        }
        if(!groupSize) return message = '–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤';
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
        ctx.reply(message);
    } catch (err) {
        console.error('failed checkin training');
        console.log(err);
    }

}

module.exports = handleCheckIt;